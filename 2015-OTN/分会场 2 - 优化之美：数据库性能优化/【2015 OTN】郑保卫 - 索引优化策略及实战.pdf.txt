.  .  .  . 

 
- DB_FILE_MULTIBLOCK_READ_COUNT - I/O - 
 (Referenced)
- ("") - 
 
- "" -  
 (Log)
-  -  - UNIQUE INDEX
3

.  .  .  . 

SELECT * FROM tab1
WHERE col1 = `ABC' AND col2 = 123;

Ø  
Ø "=" Ø "="

 

 

ABB 10 ABC 15 ABC 26 ABC 28 ABC 3322 ABC 67 BCA 12 BCA 27 BCA 48 BCA 85 CBA 35 CBA 49 CBA 64 CBA 99 ...... ...
INDEX1

120 34 123 7 123 9 123 12 123 3322 123 46 123 52 123 56 123 62 123 64 123 68 123 75 123 99 321 48 ...... ...
INDEX2

32 ABC 123 ... TAB1

ABB 55 10 ABC 67 15 ABC 89 26 ABC 100 28 ABC 123 3322 ABC 180 67 BCA 100 12 BCA 100 27 BCA 123 48 BCA 85 85 CBA 123 35 CBA 123 49 CBA 214 64 CBA 214 99
... ...
INDEX3(COL1+COL2)
5

SELECT * FROM tab1 WHERE col1 = `A'
AND col2 = 114;

COL1
A A A A A A A A A A A A B B B

COL2

ROWID

......

...

111

11

112

5

112

18

113

23

113

54

114

25

114

29

Table

115

26

access

115

30

If COL2 > 114

116

19

......

...

111

41

111

45

112

65

COL2
...... 113 113 113 113 113 113 113 113 114 114 114 114 114 115

COL1

ROWID

......

...

A

23

A

54

B

67

B

34

C

39

C

42

D

67

D

83

A

25

A B B ......

29

Table

52

access

64 IF COL1 > `A'
...

A

26

6

SELECT * FROM tab1 WHERE col1 = `A'
AND col2 BETWEEN 113 AND 114;

COL1
A A A A A A A A A A A A B B B

COL2

ROWID

......

...

111

11

112

5

112

18

113

23

113

54

114

25

114

29

Table

115

26

access

115

30

If COL2 > 114

116

19

......

...

111

41

111

45

112

65

COL2
...... 113 113 113 113 113 113 113 113 114 114 114 114 114 115

COL1
...... A A B B C C D D A A B B ...... A

ROWID
... 23 54 67 34 39 42 67 83 25 29 52 64 ... 26

If COL2 > 114

Table access X X IF COL1<>`A' X X X X
X X X
7

SELECT * FROM TAB1 WHERE COL1 = `A'
AND COL2 BETWEEN 111 AND 112

COL2 110 110 111 111 111 111 112 112 112 113

COL1 A B A B C D A B C A

ROWID 10 41 11 65 96 5 73 18 45 22

SELECT * FROM TAB1 WHERE COL1 = `A'
AND COL2 IN (111, 112)

COL2 110 110 111 111 111 111 112 112 112 113

COL1 A B A B C D A B C A

ROWID 10 41 11 65 96 5 73 18 45 22

8

PROD DEPTCD SALEDATE PRINTER 1110 20110301
PRINTER 1110 20110302
PRINTER 1110 20110303
PRINTER 1110 20110304

SELECT ......... FROM SALES WHERE PROD = `PRINTER'
AND SALEDATE = `20110326'

..................... ............ ........................

PRINTER PRINTER PRINTER

1110 1120 1120

20110326 20110301 20110302

Table access

PRINTER 1120 20110303

..................... ............ ........................

PRINTER PRINTER PRINTER PRINTER ..................... PRINTER

1120 1120 1120 1120 ............ 9120

20110323 20110324 20110325 20110326 ........................ 20110301

Table access

SELECT ......... FROM SALES WHERE PROD = `PRINTER'
AND DEPTCD like `%' AND SALEDATE = `20110326'

PRINTER 9120 20110302

PRINTER PRINTER ..................... PRINTER ROUTER ROUTER

9120 9120 ............ 9120 1120 1120

20110303 20110304 ........................ 20110326 20110301 20110302

......
Table access

SELECT ......... FROM SALES WHERE PROD = `PRINTER'
AND DEPTCD IN (SELECT DEPTCD FROM DEPT)

..................... ............ ........................

AND SALEDATE = `20110326'

ROUTER

1120 20110303

..................... ............ ........................
9

SELECT * FROM tab1
WHERE c1 = 2 AND c3 = 400

C1

C2 ROWID

1

20

10

2

30

11

2

30

57

2

40

34

2

40

58

2

40

76

3

50

21

INDEX1 (C1+C2)

X
11 ... 200 ...
O
34 ... 400 ...

57 ... 300 ...

X

58 ... 500 ...

X

X
76 ... 600 ...

TAB1

C1 C2 C3 ROWID

1 20 100 10

X
2 30 200 11

2

30 300 57 X O

11 ... 200 ... 34 ... 400 ...

2 40 400 34
X
2 40 500 58
X
2 40 600 76
3 50 500 21
INDEX2 (C1+C2+C3)

57 ... 300 ... 58 ... 500 ...
76 ... 600 ... TAB1

10

 C1(=), C2(BETWEEN), C3(=)  C1(=), C2(=), C3(LIKE)  C1(=), C2(=), C3(<>), C4(>)
11

.  .  .  . 


1) SQL 2)  3)  4)  5)  6) SQL 7) 
13

D-00 ,
D-01
   Setup
D-02
Dictionary 
D-03
SQL , à AP(SQL), AP(PLAN) 

AS-is to-be  D-30 
D-31
TO-BE   Access Path ()
 

D-32
 Access Path TO-BE Index ()
 

D-20 , 
D-21
Index , , 

D-22
SQL 

D-23



 

D-10 Index Design
D-11
Index Design (AS-IS Index)
D-16

D-12
Index Design (Access Path)
D-13
Index Design (SQL)
D-14
Index Design (Wizard)
Creation SQL Tuning Guide

D-15
TO-BE Index Naming
14

·IDO AP(Access Path). AP SQL Operator. AP ToBe-Index.

Access Path(SQL)

Access Path(PLAN)

TO-BE Index

§ 

§ SQL WHERE  § 

§ Join SQL/PlanAccess Path

col1(=(J))

§ DBMS Access Path.

§  § , Access

 AP(SQL).

Predicate.

§ SQL Grouping.
§ Access Path(SQL)Grouping .
§ Access Predicate, Filter Predicate.

§ 

§ SQL TO-BE Index
§ SQL  Pattern

§ (, SQL §  AP(SQL)

ToBe-Index.

 )



§ SQLAP(SQL)

§ 

ToBe-Index

.

16

Sample SQL

SELECT COUNT( * )

FROM T_SHOP_INOUT X,

T_SHOP_INOUT_DETAIL Y,

T_ITEM A

WHERE X.INOUT_NO = 'N1267578`

--- (1)

AND X.INOUT_NO = Y.INOUT_NO

--- (2)

AND Y.ITEM_ID = A.ITEM_ID

--- (3)

ORDER BY Y.PACKING_UNIT_NO, Y.SERIAL_NO



Index Design

Access Path (SQL)

T_SHOP_INOUT

: INOUT_NO (=J), INOUT_NO(=) ß (1),(2)

INOUT_NO

 Access Path.

T_SHOP_INOUT_DETAIL

: INOUT_NO (=J), ITEM_ID(=J)

ß (2),(3)

INOUT_NO, ITEM_IDAccess

Path.

T_ITEM

: ITEM_ID (=J)

ß (3)

TO-BE Index Design

T_SHOP_INOUT : INOUT_NO  è INOUT_NO
T_SHOP_INOUT_DETAIL : INOUT_NO, ITEM_ID.  T_SHOP_INOUT   INOUT_NO . è INOUT_NO
T_ITEM : T_SHOP_INOUT_DETAIL ITEM_ID. è ITEM_ID 17

CUST_NO, ARR_DT(B) CUST_NO, PRICE_STD PRICE_STD, BNK_CD BNK_CD, SND_CD, ARR_DT(L) PRICE_STD, ARR_DT(B) BSE_CRD_NO, ACT_NO, PRICE_STD BSE_CRD_NO, ARR_DT(L) PRICE_STD, BNK_CD(IN), ARR_DT(L) PRICE_STD[IN], BNK_CD(IN) BNK_CD, ARR_DT(B) SND_CD, BNK_CD(IN), ARR_DT(B)

CUST_NO

CUST_NO

366,723

364 1  40

CUST_NO, ARR_DT(B) CUST_NO, PRICE_STD

CUST_NO + PRICE_STD

CUST_NO, PRICE_STD PRICE_STD, BNK_CD PRICE_STD, ARR_DT(B)

PRICE_STD+BNK_CD+ARR_D T
PRICE_STD, BNK_CD

BSE_CRD_NO, ACT_NO, PRICE_STD

PRICE_STD, BNK_CD(IN), ARR_DT(L)

PRICE_STD[IN], BNK_CD(IN)

BSE_CRD_NO

PRICE_STD, BNK_CD BNK_CD, SND_CD, ARR_DT(L) PRICE_STD, BNK_CD(IN), ARR_DT(L) PRICE_STD(IN), BNK_CD(IN) BNK_CD, ARR_DT(B) SND_CD, BNK_CD(IN), ARR_DT(B)

BNK_CD+ARR_DT+SND_C
D
BSE_CRD_NO, ACT_NO, PRICE_STD BSE_CRD_NO, ARR_DT(L)
BSE_CRD_NO + ??

BSE_CRD_NO

402,849

320

1  36

D-11

1 Index Design(AS-IS Index)

D-12

2 Index Design(Access Path)

SQL AP(SQL) Grouping ToBe-Index .
.  SQL
AP(SQL).

D-13

Index Design(SQL)

3

 SQL ToBe-Index.
 Index Design(Access Path)  Index Design(Wizard)  SQL 

.  AsIs-Index AP(SQL)
 .  AsIs-Index  ToBe-Index.
1 AsIs Index  .(Optional)
2 AP (Index Design(Access Path)) .
3 ToBe IndexS QL. ( Optional )

D-14

Index Design(Wizard)

2

 AP(SQL) ToBeIndex.
 .
 

D-15

ToBe-Index Naming

4

ToBe-Index .
DDL

D-16

Creation SQL Tuning Guide

ToBe-IndexSQLTuning Guide.

TAB1 Total rows : 340,988
AsIs Index TAB1_idx1 : col3

TAB1 Total rows : 340,988
AsIs Index TAB1_idx1 : col1 TAB1-idx2 : col3, col2
D-00 



·  ·  ·  · 

D-10
Index Design

D-20


SQL#1 (2014-4-1) SELECT COL1, COL2 FROM TAB1 WHERE COL1 = `23'

AP#1 COL1(=)

ToBe Index TAB1_idx1 : COL1

Index   ()
DBA 

SQL#2 ( 2014-4-1) SELECT COL1, COL2 FROM TAB1 WHERE COL2 = `23'
AND COL3 = `dkhd'

AP#2 COL2(=), COL3(=)

ToBe Index TAB1_idx2 : COL3, COL2

 
 

SQL#3 ( 2014-4-16) SELECT COL1, COL2 FROM TAB1 WHERE COL5 = `2014'
AND COL3 = `dkhd'

AP#3 COL3(=), COL5(=)


ToBe Index TAB1_idx3 : COL5, COL3
v IDO .

 AP 

 AsIs Index ­ ToBe Index  SQL,AP



 20



· . · AS-IS Index AP(SQL)TO-BE Index. · AS-IS Index AP(SQL) Simulation   Index OPT Score
.

1

4

2

3

1 AP(SQL)  AsIs-Index.
2   AP(SQL)AsIsIndex
3 2 AsIs-Index  (Index OPT Score) .
AsIsIndex ToBe-Index.
938 AP(SQL)  117OPT Score .
 OPT Score  

4 AsIs-Index ToBe-Index AP(SQL)  .
21

Index Design D-12 Using Access Path
2 4



·  AP(SQL) ToBe-Index. · SQL AP(SQL)
. · DB (Cardinality ).

1 3

1  Access Path
2  AP  `=`  
3   
4    ToBe Index.
5 5 Tobe Index  AP.  `AND'  `OR'.

22

Index Design D-12 Using Access Path
10
6



·  AP(SQL) ToBe-Index. · SQL AP(SQL)
. · DB (Cardinality ).

9 7
8

6  ToBe Index .
7   `Option' 
8  ToBe Index AP.
9  AP-ToBe Index  .
10  1~9  Tobe Index AP  ToBe Index 

23

.  .  .  . 

1GB 1GB


4%

96%


662 480
3448

1GB 1GB-10GB 10GB

10GB6621GB10GB

1GB15696% 3506       4.0T 4801GB3448

4560   4.5T

4%

4%

10GB

1GB

1-10GB 1GB

26% 70%

28% 66%

1GB-10GB 10GB

10GB6070% 1GB10GB9026%

10GB66%1GB10GB 28%1GB4%



 
 

10GB SQL30 10 10GB15670%


 

1GB10GB SQL25

 

5 1GB10GB15626%

40000 35000 30000 25000 20000 15000 10000 5000
0

AP

SQL

41969.4375 41969.6875 41970.6875 41971.6875 41973.6875 41974.6875 41974.77083
41975.5 41976.54167
41976.75 41977.75 41978.75 41980.625 41981.75 41982.375 41982.70833 41983.45833 41983.91667 41985.41667 41988.04167 41988.5625 41988.72917 41989.4375
41990.5 41990.79167
41991.5 41991.9375
41992.5 41992.77083
41995.5 41997.5 41998.5 41999.75 41999.80208 42006.43056 42006.22222 42007.44444 42007.88542 42008.43056 42009.85417 42010.47917 42010.72917 42011.45833 42012.875 42013.625 42018.46528 42018.73958 42019.47917 42019.73958 42023.625 42025.02083 42026.75 42027.45833 42027.70833 42030.61458

AP 

30 20 10
0 

 3



 9

 11


 28

 26

60 50 40 30 20 10
0 AP<50 SQL<500



AP(50,100] SQL(500,1000]

AP(100,500] SQL(1000,5000]
SQL AP 

AP(500,1000]

AP>1000 SQL>10000

SQL(5000,10000]

125TOPSQL
 ü SQL  IO  625,386,664  Blocks   2,687,922 Blocks,231.8 ü SQL   9774.49 S   228.68  S, 42.74  ü TOPSQL  


, ü 
--Jennifer -- Jennifer

ü 
--, 0.490.24

ü 
--5.25s  5.19s  à 4.84s à 4.25s à 4.75s

ü 
--Elapsed:  00:07:13.50 IO:  22M                           --Elapsed:  00:00:04.67 IO:  523K

ü 

--GCS

 Elapsed: 00:35:18.28

IO: 488M

 Elapsed: 00:00:00.53

IO: 75826

--GCSSQL  Elapsed: 00:02:43.14  Elapsed: 00:00:00.11

IO: 23575 IO: 4773

RAC1  49  601 1.  IO  USER  I/O  -- OracleLIS 2.    --  -- 
3. 

RAC2   49  601 1.  IO  USER  I/O  -- OracleLIS 2.    --  -- 
3. 


· IDOSGA · SQL · SQL


SQL
· IDOSGA SQL
· 



 



· index  2(col1+col2)index   1(col1)index 1  
· SQL 
· 

·  ?


· CPUIO 
· 30 10
· SQLIDO(Rep ository)

SQL
· IDOSQL (Repository) 1
· AP#SQL IDO(Repository)
· SQL-TRACESQL 









· index2(col1+col2)index 1(col1)index1  
· SQL 
·  

·  SQL 
· 500 

 





Oracle

z3 ­ SQL

zData ­ 

BayMax

 

Thank you!
zbw@en-core.com.cn


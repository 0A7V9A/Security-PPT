ARM EXPLOITATION ROPMAP
Long Le ­ ...
{longld, members}@vnsecurity.net

ABOUT US
» VNSECURITY.NET » CLGT CTF team

Disclaimer: The opinions and research presented here are solely
VNSECURITY research group and do not represent the opinions and research of any other organization / company

ARM EXPLOITATION ROPMAP

2

MOTIVATION(1)
» There is no public ARM ROP toolkit
· objdump/otool + grep

ARM EXPLOITATION ROPMAP

3

MOTIVATION(2)
» ROP shellcode/payload are hardcoded

ARM EXPLOITATION ROPMAP

@fjserna's iOS dyld ROP
payload
4

MOTIVATION(3)
» Simple gadgets beat complex automation
@comex's star_ framework

ARM EXPLOITATION ROPMAP

5

IN THIS TALK
» Extending x86 ROP toolkit to ARM » Intermediate Language for ROP shellcode » Implementing ROP automation for ARM
· ROP shellcode to gadget chains · Gadget chains to payload

ARM EXPLOITATION ROPMAP

6

AT THE END

ROP shellcode
·LOAD r0, #0xdeadbeef ·LOAD r1, #0 ·LOAD r2, #0 ·LOAD r7, #0xb · SYSCALL

Gadget chains
·ldr r0 [sp #12] ; add sp sp #20 ; pop {pc}
·pop {r1 r2 r3 r4 r5 pc}
·pop {r2 r3 r7 pc} ·pop {r2 r3 r7 pc} ·svc 0x00000000 ; pop
{r4 r7} ; bx lr

Payload
·[ BASE+0xaa0, 0x4b4e554a, 0x4b4e554b, 0x4b4e554c, 0xdeadbeef, 0x4b4e554e ]
·[ BASE+0x10d4, 0x0, 0x4b4e554b, 0x4b4e554c, 0x4b4e554d, 0x4b4e554e ]
·...

ARM EXPLOITATION ROPMAP

7

EXTENDING X86 ROP TOOLKIT TO ARM

ARM EXPLOITATION ROPMAP

8

X86 TO ARM: REGISTERS

x86 eax, ebx, ecx, edx, esi, edi esp ebp eip N/A

ARM r0, r1, r2, r3, r4, ... r11, r12 sp (r13) fp (r11) pc (r15) lr (r14)

ARM EXPLOITATION ROPMAP

9

X86 TO ARM: ASSEMBLY

x86 pop eax mov eax, ebx add eax, ebx add eax, 0x10 mov eax, [ebx] mov [eax+0x10], ebx call eax jmp eax call function
ret int 0x80

ARM pop {r0} mov r0, r1 add r0, r0, r1 add r0, #16 ldr r0, [r1] str r1, [r0, #16] blx r0 bx r0 bl function (return address in lr) pop {pc} / bx lr svc 0x80 / svc 0x0

ARM EXPLOITATION ROPMAP

10

X86 TO ARM: SHELLCODE

x86 eax = sysnum ebx = arg1 ecx = arg2 edx = arg3 ... int 0x80

ARM r7/r12 = sysnum r0 = arg1 r1 = arg2 r2 = arg3 ... svc 0x80 / svc 0x0

ARM EXPLOITATION ROPMAP

11

X86 TO ARM: ROP GADGETS

x86 ret
pop edi; ebp; ret call eax jmp eax Instruction alignment: No
Unintended code

ARM
pop {..., pc} bx lr
pop {r1, r2, pc}
blx r0
bx r0
Instruction alignment: - 4 bytes (ARM) - 2 bytes (THUMB)
Intended code (mostly)

ARM EXPLOITATION ROPMAP

12

FINDING GADGETS

» Search for RET

· pop {..., pc}
 ".\x80\xbd\xe8"  ".\xbd"
· bx Rm / blx Rm
 ".\xff\x2f\xe1"  ".\x47"

(ARM) (THUMB)
(ARM) (THUMB)

» Disassemble backward

· Every 2-byte or 4-bytes

» Use your own ARM disassembly library

ARM EXPLOITATION ROPMAP

13

QUICK DEMO

ARM EXPLOITATION ROPMAP

14

INTERMEDIATE LANGUAGE FOR ROP SHELLCODE

ARM EXPLOITATION ROPMAP

15

ROP SHELLCODE

» Common payloads
· Chain library calls · Disable DEP/NX
 Transfer and execute normal shellcode
» Common operations
· Registers assignment · Data movement · Make function call or syscall

source: comex's star_ framework

ARM EXPLOITATION ROPMAP

16

ROP INTERMEDIATE LANGUAGE
» Simple pseudo-assembly language » 6 instructions » Native registers » Easy to read / write / implement

ARM EXPLOITATION ROPMAP

17

ROP IL
INSTRUCTION
ROP instructions · LOAD · STORE · ADJUST · CALL · SYSCALL · NOP

LHS

RHS

LHS/RHS types · REG: register · VAL: value · REF: register reference · MEM: memory reference · NON

ARM EXPLOITATION ROPMAP

18

ROP IL: LOAD
» Load value to register
Syntax
LOAD Rm, #value LOAD Rm, Rn LOAD Rm, [Rn] LOAD Rm, [#address]

Example
LOAD r0, #0xcafebabe LOAD r0, r1 LOAD r0, [r1] LOAD r0, [#0xdeadbeef]

ARM EXPLOITATION ROPMAP

19

ROP IL: STORE
» Store value to memory
Syntax
STORE [Rm], Rn STORE [Rm], #value STORE [Rm], [Rn] STORE [#target], Rn STORE [#target], [Rn] STORE [#target], #value STORE [#target], [#address]

Example
STORE [r0], r1 STORE [r0], #0xcafebabe STORE [r0], [r1] STORE [#0xdeadbeef], r0 STORE [#0xdeadbeef], [r0] STORE [#0xdeadbeef], #0xcafebabe STORE [#0xdeadbeef], [#0xbeefc0de]

ARM EXPLOITATION ROPMAP

20

ROP IL: ADJUST
» Add/subtract value to/from register

Syntax
ADJUST Rm, Rn ADJUST Rm, #value ADJUST Rm, [Rn] ADJUST Rm, [#address]

Example
ADJUST r0, r1 ADJUST r0, #4 ADJUST r0, [r1] ADJUST r0, [#0xdeadbeef]

ARM EXPLOITATION ROPMAP

21

ROP IL: CALL
» Call/jump to function
Syntax
CALL Rm CALL [Rm] CALL #address CALL [#address]

Example
CALL r0 CALL [r0] CALL #0xdeadbeef CALL [#0xdeadbeef]

ARM EXPLOITATION ROPMAP

22

ROP IL: SYSCALL
» System call

SYSCALL

Syntax

SYSCALL

Example

ARM EXPLOITATION ROPMAP

23

SAMPLE SHELLCODE (1)
» mprotect(writable, size, flag)
· LOAD r0, #writable · LOAD r1, #size · LOAD r2, #flag · LOAD r7, #0x7d · SYSCALL
» execve("/bin/sh", 0, 0): known "/bin/sh" address
· LOAD r0, #binsh_address · LOAD r1, #0 · LOAD r2, #0 · LOAD r7, #0xb · SYSCALL

ARM EXPLOITATION ROPMAP

24

SAMPLE SHELLCODE (2)
» execve("/bin/sh", 0, 0): use known writable data region to store "/bin/sh"
· STORE [#writable], #0x6e69622f ; "/bin" · STORE [#writable+0x4], #0x68732f ; "/sh" · LOAD r0, #writable · LOAD r1, #0 · LOAD r2, #0 · LOAD r7, #0xb · SYSCALL

ARM EXPLOITATION ROPMAP

25

SAMPLE HIGH LEVEL WRAPPER (1)
» syscall(sysnum, *args)
· LOAD r0, #arg1 · LOAD r1, #arg2 · LOAD r2, #arg3 · LOAD r3, #arg4 · LOAD r4, #arg5 · LOAD r5, #arg6 · LOAD r7, #sysnum · SYSCALL

ARM EXPLOITATION ROPMAP

26

SAMPLE HIGH LEVEL WRAPPER (2)
» funcall(address, *args)
· LOAD r0, #arg1 · LOAD r1, #arg2 · LOAD r2, #arg3 · LOAD r3, #arg4 · $arg5 ·... · CALL #address

ARM EXPLOITATION ROPMAP

27

SAMPLE HIGH LEVEL WRAPPER (3)
» save_result(target)
· STORE [#target], r0
» write4_with_offset(reference, value, offset)
· LOAD r0, [#reference] · ADJUST r0, #offset · STORE [r0], #value

ARM EXPLOITATION ROPMAP

28

IMPLEMETATION: THE ROPMAP

ARM EXPLOITATION ROPMAP

29

ROP AUTOMATION
» Automation is expensive
· Instructions formulation · SMT/STP Solver
» Known toolkits
· DEPLib
 Mini ASM language  No ARM support
· Roppery (WOLF)
 REIL  Not public

ARM EXPLOITATION ROPMAP

30

THE ROPMAP
» ROPMAP
· Direct mapping ROP instructions to ASM gadgets · LHS/RHS type is available in ASM gadgets · Primitive gadgets
» CHAINMAP
· Indirect mapping ROP instructions to ROP chains · LHS/RHS type is not available in ASM gadgets
» Engine to search and chain gadgets together » Payload generator

ARM EXPLOITATION ROPMAP

31

SAMPLE ROPMAP: LOAD

LOAD Rm, #value

mov Rm, #value pop {Rm, ..., pc} ldr Rm, [sp ...]

LOAD Rm, Rn

mov Rm, Rn add Rm, Rn sub Rm, Rn

LOAD Rm, [Rn]

ldr Rm, [Rn ...]

LOAD Rm, [#addr]

LOAD Rn, #addr LOAD Rm, [Rn]

ARM EXPLOITATION ROPMAP

32

SAMPLE ROPMAP: STORE

STORE [Rm], Rn

str Rn, [Rm ...]

STORE [Rm], #value STORE [Rm], [#addr] STORE [#target], Rm STORE [#target], #value STORE [#target], [#addr]

LOAD Rn, #value STORE [Rm], Rn
LOAD Rn, [#addr] STORE [Rm], Rn
LOAD Rn, [#target] STORE [Rn], Rm
LOAD Rm, #value STORE [#target], Rm
LOAD Rn, [#addr] STORE [#target], Rn

ARM EXPLOITATION ROPMAP

33

ASSEMBLER ENGINE
» Assumptions
· Binary has enough primitive gadgets · Chaining primitive gadgets is easier than finding complex gadgets
» Approach
· Search for gadget candidates
· Sort gadgets (simple scoring)
· Chain gadgets by pair matching
· LHS vs RHS · LHS vs LHS
· Apply basic validation rules
· Operands matching · Tainted registers checking

ARM EXPLOITATION ROPMAP

34

PAIR MATCHING
STORE [#target], [#addr]
ARM EXPLOITATION ROPMAP

pop {r4 pc}
ldr r0 [r4 #4] ; pop {r4 r5 r6 r7 pc}
pop {r4 pc}
str r0 [r4 #16] ; mov r0 r3 ; pop {r1 r2 r3 r4 r5 pc}
35

GADGET VALIDATION

LOAD r6, [r5]

ldr r6 [r5 #4] ; sub r0 r0 r6 ; pop {r4 r5 r6 pc}

STORE [r1], [r5]

ldr r1 [r5 #36] ; ldr r5 [r4 #36] ; sub r0 r1 r5 ; add sp sp #36 ; pop {r4 r5 r6 r7 pc}

ARM EXPLOITATION ROPMAP

36

ROP SHELLCODE TO GADGET CHAINS

» execve("/bin/sh", 0, 0)
# ROP code: load r0, #0xdeadbeef -------------------------------------------------------------------0xdc68L : pop {r0 pc} ;; -------------------------------------------------------------------# ROP code: load r1, #0 ------------------------------------------------------------------0x16a6dL : pop {r1 r7 pc} ;; -------------------------------------------------------------------# ROP code: load r2, #0 -------------------------------------------------------------------0x30629L : pop {r2 r3 r6 pc} ;; -------------------------------------------------------------------# ROP code: load r7, #0xb -------------------------------------------------------------------0x16a6dL : pop {r1 r7 pc} ;; -------------------------------------------------------------------# ROP code: syscall -------------------------------------------------------------------0xc734L : svc 0x00000000 ; pop {r4 r7} ; bx lr ;; --------------------------------------------------------------------

ARM EXPLOITATION ROPMAP

37

PAYLOAD GENERATOR (1)
» Input
· ROP IL instructions · Gadgets · Constant values · Constraints and values binding
» Output
· Stack layout · Output can be used for high level ROP wrapper · Not size optimized

ARM EXPLOITATION ROPMAP

38

PAYLOAD GENERATOR (2)
» Approach
· Gadgets emulation
· Emulate stack related operations
· Write back required value to stack position
 LHS/RHS reverse matching  Simple math calculation
· Feed back values binding to next instructions

ARM EXPLOITATION ROPMAP

39

REVERSE MATCHING

r4 = #address - 4

LOAD r0, [#address]

pop {r4 pc}
ldr r0 [r4 #4] ; pop {r4 r5 r6 r7 pc}
r4 = #address - 4

ARM EXPLOITATION ROPMAP

40

GADGET EMULATION
» Single gadget » Only stack related operations

uninitialized registers
SP

JUNK+4 JUNK+3 JUNK+2 JUNK+1
JUNK

Init state

SP = SP+3 r7 = JUNK+2 r3 = JUNK+1 r2 = JUNK

JUNK+2 JUNK+1
JUNK

pop {r2 r3 r7 pc} ;; r2 = #0x0 ; r7 = #0xb

ARM EXPLOITATION ROPMAP

SP
41

STACK WRITE BACK
» Payload = values on stack

SP = SP+3 r7 = JUNK+2 r3 = JUNK+1 r2 = JUNK

SP

JUNK+2

0xb

JUNK+1

JUNK+1

JUNK

0x0

SP

pop {r2 r3 r7 pc} ;; r2 = #0x0 ; r7 = #0xb

Payload

ARM EXPLOITATION ROPMAP

42

OUTPUT PAYLOAD

» execve("/bin/sh", 0, 0)
# ROP code: load r0, #0xdeadbeef # pop {r0 pc} [ BASE+0x2d38, 0xdeadbeef ] # -----------------------------------------------------------------# ROP code: load r1, #0 # pop {r1 r7 pc} [ BASE+0xbb3d, 0x0, 0x4b4e554b ] # -----------------------------------------------------------------# ROP code: load r2, #0 # pop {r2 r3 r6 pc} [ BASE+0x256f9, 0x0, 0x4b4e554b, 0x4b4e554c ] # -----------------------------------------------------------------# ROP code: load r7 # pop {r1 r7 pc} [ BASE+0xbb3d, 0x0, 0xb ] # -----------------------------------------------------------------# ROP code: syscall # svc 0x00000000 ; pop {r4 r7} ; bx lr [ BASE+0x1804, 0x4b4e554a, 0xb ] # ------------------------------------------------------------------

ARM EXPLOITATION ROPMAP

43

DEMO

ARM EXPLOITATION ROPMAP

44

FUTURE PLAN
» Optimize output payload
· Reduce duplication
» Support ARM Thumb-2
· More gadgets
» Extend to x86/x86_64 (partial now) » Conditional jump, loop instructions

ARM EXPLOITATION ROPMAP

45

THANK YOU Q &A

ARM EXPLOITATION ROPMAP

46


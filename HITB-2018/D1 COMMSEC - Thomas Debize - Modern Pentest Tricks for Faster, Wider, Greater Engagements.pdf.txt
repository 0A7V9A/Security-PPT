Modern pentest tricks for faster, wider, greater engagements
HITB Amsterdam 2018 ­ CommSec Track ­ April, 12th
Thomas DEBIZE
thomas.debize@wavestone.com

Who am I ? Basically an infosec auditor and incident responder
Thomas DEBIZE
/ Guitar, riding, volley-ball / Git pushing infosec tools
> https://github.com/maaaaz
2

/ 01 / 02 / 03

What changed and why do you need to adapt? Modern tricks for modern pentesters Taking a step back

/ 01 / 02 / 03

What changed and why do you need to adapt? Modern tricks for modern pentesters Taking a step back

What changed in the pentest domain during that decade ?

Scan the entire IPv4 space in few minutes/hours/days

In 2018, it is now easily possible to
Query all OSINT information you want

Pwn large Windows corporate infrastructures

With distributed (vulnerable) computing > Census 2012
http://census2012.sourceforge.net/paper.ht ml
With asynchronous programming > ZMap > Masscan > Unicornscan
With third-party platforms doing it for you, sometimes for free > Shodan > ZoomEye > Scans.io > Censys.io

Offline, by building your own platform > "Modern Internet Scale
Reconnaissance"
https://github.com/hdm/2017-BSidesLVModern-Recon
Online, by querying a lot of cool services > Recon-ng > DomainTools > Pastebin > Certificate Transparency >...

Starting with reconnaissance > of assets: PowerView > of admins: BloodHound
Then through exploitation > CrackMapExec > Responder
And just after, post-exploitation > Mimikatz > Invoke-Mimikatz > Empire
Or...just automate everything in one tool > Deathstar
https://github.com/byt3bl33d3r/DeathStar5

Why do you need to adapt your techniques ?
Because more and more security folks are writing more and more tools Because more and more security folks are writing more and more good quality and reliable tools Because you will be asked to faster cover wider scopes Because it has already changed Current penetration testing assessments now require pentesters to...
S C A L E
6

/ 01 What changed and why do you need to adapt ?

/ 02

Modern tricks for modern pentesters

/ 03

Taking a step back

1. CSV for data analysis and processing, CSV, always CSV
Pentesting involves a lot of iterative work start: / 1. Scan some targets / 2. Exploit them / 3. Harvest new data on them such credentials, IPs etc.

/ Use the new found data on new and old targets goto start
 Being able to quickly process new data is crucial to scale
 Choosing a good data format is really important
From experience, CSV is the best format to use as: / It is a common format in programming languages
> Although Python 2 "csv" module does not support utf-8... (use unicodecsv instead)
/ It is a human-readable format

It's a rather simple format but there is no standard and common pitfalls are: / Encoding: please use utf-8 / Quoting and escaping: please choose to
have all fields quoted to prevent any unwanted stuff
Hah, and one last thing: Beware of CSV injection ! 
(http://georgemauer.net/2017/10/07/csv-injection.html)

In short, stick to the CSV format for inputs and outputs
8

1. CSV for data analysis and processing, CSV, always CSV
Examples of common pentest / infosec tools offering CSV output

nmaptocsv
A simple script to convert Nmap output to CSV
https://github.com/maaaaz/ nmaptocsv

Wfuzz
Web application fuzzer (URL enumeration etc.)
http://wfuzz.readthedocs.io/ en/latest/

testssl.sh
SSL/TLS protocols and algorithms tester https://testssl.sh/

BloodHound
Windows domain compromise path finder
https://github.com/BloodHo undAD/BloodHound

Ophcrack
Windows password cracker
http://ophcrack.sourceforge. net/

Recon-ng
OSINT reconnaissance framework
https://bitbucket.org/LaNMa SteR53/recon-ng

Nikto
Webserver scanner and fuzzer https://cirt.net/Nikto2

Nessus
Infrastructure vulnerability scanner https://www.tenable.com
9

1. CSV for data analysis and processing, CSV, always CSV
3 tool suites to handle CSV a) Microsoft Excel, with "Text to Columns" and then "Filter" functions
https://stackoverflow.com/questio ns/22905814/mid-function-formicrosoft-excel-to-obtain-columntxt-file

Excel max number of line is 1 million: THIS IS a commonly encountered issue

10

1. CSV for data analysis and processing, CSV, always CSV

3 tool suites to handle CSV b) csvkit / free and open-source / https://csvkit.readthedocs.io/

"csvkit is a suite of command-line tools for converting to and working with CSV, the king of tabular file formats."

/ Input > in2csv, sql2csv: convert anything to csv > csvclean, csvformat: ensure your input or output files is correctly formatted
/ Processing > csvcut: just like UNIX "cut" > csvgrep: not just like UNIX "grep", allows to search regex/patterns only in desired columns > csvjoin: execute a SQL-like join to merge CSV files on a specified column or columns > csvsort: not just like UNIX "grep", allows to sort desired fields > csvstack: concatenate/merge multiple csv files

/ Output and Analysis

> csvjson: convert a CSV file into JSON

> csvlook: just admire the beauty of a CSV file in your interpreter

> csvpy: load a CSV file into a CSVKitReader object and then drops into a Python shell

> csvsql: perform SQL queries on a CSV file

> csvstat: print some statistics per columns

11

1. CSV for data analysis and processing, CSV, always CSV
3 tool suites to handle CSV b) csvkit / free and open-source / https://csvkit.readthedocs.io/
Demo time
12

1. CSV for data analysis and processing, CSV, always CSV
3 tool suites to handle CSV c) Dataiku Data Science Studio (DSS) / Free edition / Enterprise / https://www.dataiku.com/dss/trynow/ Dataiku DSS is a data science tool that allows to perform the same kind of processing than Excel but without size limitation / I find it very intuitive, user-friendly and efficient
> 4 hours on a 4 cores + 16 GB RAM machine to join the "hash" column a 30 GB uncompressed DB dump with a 4 GB "hash : cleartext" file
/ Some cool tutorials on their site to comprehend the concepts (datasets, recipes etc.)
/ https://www.dataiku.com/learn/guide/tutorials/basics.html
Demo time
13

1. CSV for data analysis and processing, CSV, always CSV
3 tool suites to handle CSV c) Dataiku Data Science Studio (DSS) / Free edition / Enterprise / https://www.dataiku.com/dss/trynow/
14

2. Parallel execution
Pentesting involves a lot of parallel work / Extracting the results of a tool output on multiple
targets / Launching the same bruteforce on multiple targets /...
 Being able to launch simultaneous actions is crucial to be able to scale on wide scopes
GNU Parallel is a Perl script to parallelize any command in order to maximize your I/O and CPU usage / It's a drop-in replacement of GNU xargs, and is mostly an xargs "on steroids" / A *lot more* option than GNU xargs but the ones you will love are:
> --progress: a percentage of done/to be done > --bar: a nice progress bar > --joblog: a log of executed tasks, allow resuming > --resume: resume to your current execution status
In short, use as much GNU Parallel as you can
15

2. Parallel execution
Example of a parallel processing involving multiple tools for URL discovery

$ parallel

http://foo

-a target_list.txt

https://foobar

--joblog joblog --progress --bar

sed expression to remove bad chars in filename

https://bar:4443 ...

"wfuzz

-f 'results/result_wfuzz_{= s/[:\/]/_/g =}.json',json

--filter 'c<403'

-R 3 -Z ­c

-z file,'/usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-small.txt'

{1}/FUZZ"

$ ls ./results/result_wfuzz_*.json |
parallel
"cat {} | jq '.[] | if (.code == 200) then .url else empty end' | sed 's/"//g' >> list_to_webscreenshot.txt"

"webscreenshot" is a simple tool to take screenshots of URLs

(https://github.com/maaaaz/webscreenshot)

16

3. High-level scripting languages for easier static and dynamic analysis
Pentesting involves sometimes reversing "custom-wtf" obfuscation or encryption / Especially true for Android and Java thick-client applications
> No I'm kidding, it affects any technology. People do not understand crypto. > But still, very usual during Android application engagements / Sometimes you don't want to go down the rabbit hole to figure out how it works / Sometimes you just can't replicate/rip the code into your favourite language > For example, Oracle WebLogic Server encrypts local passwords with PBKDF PKCS#12 SHA1 +
RC2: > No Python module was (is?) implementing that cryptosystem...
 So use a high-level scripting language for instrumentation !

For static analysis of Android and Java applications, use Jython:
/ Writing Java code in Python... / ...that can use Java classes... / ...AND Python libraries in the same snippet

For dynamic analysis of everything else, use Frida:
/ Writing Python or JS or QML or Swift or .NET...
/ ...injecting C++ scripted in JS (Google v8) / ...to instrument ASM, Objective-C or Dalvik / ...on Windows, Mac, Linux, Android, iOS

17

3. High-level scripting languages for easier static and dynamic analysis

Example of ripping a Java custom-wtf routine in Jython

import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.spec.IvParameterSpec; import javax.crypto.spec.SecretKeySpec;

from javax.crypto import * from javax.crypto.spec import * from java.security import *

public CharSequence decode(String paramString) throws

Exception {

A real-life example: weblogicpassworddecryptor

try {

https://github.com/maaaaz/weblogicpassworddecryptor/

this.seed = <whatever>

seed = <whatever>

this.key = <whatever>

key = <whatever>

IvParameterSpec localIvParameterSpec = new IvParameterSpec(resizeParam(this.seed).getBytes("UTF-8"));
SecretKeySpec localSecretKeySpec = new SecretKeySpec(this.key.getBytes("UTF-8"), "AES");
Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");

localIvParameterSpec = IvParameterSpec(seed)
localSecretKeySpec = SecretKeySpec(key, "AES") localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding")

localCipher.init(2, localSecretKeySpec, localIvParameterSpec);
paramString = new String(localCipher.doFinal(Base64.decode(paramString, 0)), "ISO-8859-1");
return paramString;} }
}

localCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, localIvParameterSpec)
cleartext = localCipher.doFinal(encrypted_stuff).tostring().decode('utf8')
18

4. Compile Python scripts on-the-fly
Pentesting involves sometimes to have compiled version of tools / Because the target you are onto does not the proper tool execution environment (dependencies,
interpreter) and you can't install it (no root, no outgoing connection, laziness, etc.) / Because you can't just have a proper reverse-shell or meterpreter / Because you need to evade antivirus
 So compile Python tools with PyInstaller

PyInstaller bundles the script with a Python interpreter
To install it on Windows: / Install "Visual C++ Compiler for Python"
https://wiki.python.org/moin/WindowsCompilers
/ $ pip install pyinstaller
You can apparently even cross-compile for Windows from Linux, with wine: / Google translate this
http://thanat0s.trollprod.org/2017/04/crosscompiler-un-python-en-pepour-windows-avec-juste-ton-linux-console/

/ The most useful options are:
> --onefile: creates a standalone executable file which is a UPX-compressedself-extracting zip payload
> --onedir: creates a single directory with everything inside, if you don't want a standalone executable file as large standalone (> 18 MB) take *time* to unzip before execution
> --key <key>: a specific key to encrypt the zip payload, of course included in the executable (https://0xec.blogspot.fr/2017/02/extracting-
encrypted-pyinstaller.html)
> --icon <icon_file>: for visual fanciness
19

4. Compile Python scripts on-the-fly
Example of Python scripts compiled with PyInstaller
Impacket examples
https://github.com/maaaaz/impack et-examples-windows https://blog.ropnop.com/practicalusage-of-ntlm-hashes/
20

4. Compile Python scripts on-the-fly

Example of Python scripts compiled with PyInstaller
Patator
https://github.com/maaaaz/patator-windows/

This script depends on a lot of third-party modules... > paramiko > ajpy > pysnmp > cx_Oracle > psycopg2 > IPy > dnspython > Pycurl

...and these dependencies have their own dependencies:

> appdirs > asn1crypto > cffi > cryptography > enum34 > idna > impacket

> ipaddress > pyOpenSSL

> packaging > pyparsing

> pcapy

> pypiwin32

> ply

> pysmi

> pyasn1

> pysnmp

> pycparser > six

> pycryptodome

 ....But PyInstaller managed to include all of them in an standalone executable !
21

4. Compile Python scripts on-the-fly
Example of Python scripts compiled with PyInstaller
CrackMapExec
(old version 2 yes, but utf-8 compatible ) https://github.com/maaaaz/CrackM apExecWin
jdwp-shellifier
https://github.com/maaaaz/jdwpshellifier-windows
Demo time
22

/ 01 What changed and why do you need to adapt ?

/ 02

Modern tricks for modern pentesters

/ 03

Taking a step back

Main messages

CSVKit all the things

Dataiku all the things

GNU Parallel all the things

Jython all the things

Frida all the things

PyInstall all the things
24

Questions ?

Thomas DEBIZE thomas.debize@wavestone.com

wavestone.com
@wavestoneFR @secuinsider


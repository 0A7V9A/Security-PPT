Automatically Identify Malware Capabilities
Willi Ballenthin, Moritz Raabe

Willi Ballenthin
williballenthin

Moritz Raabe
m_r_tz

Contributors

Ana Maria Martinez Gomez, Mike Hunhoff, Blaine Stancill,

2

Matt Williams, and rest of FLARE (~200 years RE experience)

3

analyzes a program and identifies things the program could do.
uses rules, written by experts, to recognize these capabilities.
4

vs Wannacry worm

6

7

names of capabilities
8

groups of similar
capabilities
9

descriptive, not binary
10

dropper?
11

wannacry killswitch
12

why rule matched
13

where rule matched
14

killswitch domain
15

16

17

18

the triage analysis "gap"
less experience  more 
­ often good triage can avoid deeper analysis ­ and thus, save time and money
more experience:
­ know where to look ­ know shortcuts ­ know what's common
19

the triage analysis "gap"
triage should be quick and guide further analysis steps current triage tools
­ strings / FLOSS: all strings in a binary, used or not, without any context ­ PE header: e.g. imports, but not how/why they're used ­ sandbox detonation: limited to behavior seen on exercised code-paths
20

Features
+ Rules
21

= Program Capabilities

Features Rules
Code
22

based on PE101 by Ange Albertini (CC BY 2.0)

Features Rules
Code
23

based on PE101 by Ange Albertini (CC BY 2.0)

Features Rules
Code
24

Features Rules
Code
 API calls
25

Features Rules
Code
 API calls  numbers
26

Features Rules
Code
 API calls  numbers  string
references
27

Features Rules
Code
 API calls  numbers  string
references
28

Features Rules
File
 header info  imports  strings
29

based on PE101 by Ange Albertini (CC BY 2.0)

Features
...
30

Features
...
+ Rules
31

Features Rules

Feature combination  capability

32

Features Rules

Feature combination  capability

Dropper

AND

33

Features Rules

Feature combination  capability

AND
AND

Dropper
TCP socket
34

Features
...
+ Rules
35

AND
= OR
NOT COUNT

Program Capabilities

Persist via registry Run key
36

Persist via registry Run key
"this sample may..."
37

Persist via registry Run key
categorization
38

Persist via registry Run key
categorization tagging
39

Persist via registry Run key
where to look
40

Persist via registry Run key
rule logic
41

Persist via registry Run key
logic tree of features
42

Persist via registry Run key
features
43

Create TCP socket
44

Connect TCP socket
previous rule match
45

Schedule task via ITaskScheduler (COM)
46

Schedule task via ITaskScheduler (COM)
47

~260 rules ­ by namespace

persistence

executable

9

10

anti-analysis

file-system

17

registry

process

other 27

service

host-interaction

106

datamanipulation
36

compression encoding encryption

ftp

communication

hashing

http

42

48

tcp

vs Wannacry encryptor

encryptor
50

encryptor
51

encryptor
52

encryptor
53

encryptor
54

when things break...
$ capa bad.dll WARNING:capa:-------------------------------------------------------------------------------WARNING:capa: This sample appears to be packed. WARNING:capa: WARNING:capa: Packed samples have often been obfuscated to hide their logic. WARNING:capa: capa cannot handle obfuscation well. This means the results may be misleading or incomplete. WARNING:capa: If possible, you should try to unpack this input file before analyzing it with capa. WARNING:capa: WARNING:capa: Use -v or -vv if you really want to see the capabilities identified by capa. WARNING:capa:--------------------------------------------------------------------------------
$ capa mal.exe WARNING:capa:-------------------------------------------------------------------------------WARNING:capa: This sample appears to be a .NET module. WARNING:capa: WARNING:capa: .NET is a cross-platform framework for running managed applications. WARNING:capa: capa cannot handle non-native files. This means that the results may be misleading or incomplete. WARNING:capa: You may have to analyze the file manually, using a tool like the .NET decompiler dnSpy. WARNING:capa: WARNING:capa: Use -v or -vv if you really want to see the capabilities identified by capa. WARNING:capa:--------------------------------------------------------------------------------
55

capa can be TOO good

"__get_sse2_info"

execute anti-VM instructions

namespace anti-analysis/anti-vm/vm-detection

author

moritz.raabe@fireeye.com

scope

basic block

att&ck

Defense Evasion::Virtualization/Sandbox Evasion::System Checks [T1497.001]

mbc

Anti-Behavioral Analysis::Virtual Machine Detection::Instruction Testing

examples Practical Malware Analysis Lab 17-03.exe_:0x401A80

basic block @ 0x4084A2

or:

mnemonic: cpuid @ 0x4084A6, 0x4084B9

56

future work
 code analysis engines
­ operate on sandbox data or API traces ­ add Python 3 support
 integration
­ easy to markup via standardized JSON output
 "bubble up" capabilities
­ confusion when a capability is split across multiple functions
57

IDA Pro integration
58

IDA Pro integration
59

60

get capa
github.com/fireeye/capa standalone executables, no installation
FLARE-VM & REMnux soon
61

share expertise
github.com/fireeye/capa-rules as you find cool malware behaviors,
share your rules!
62

analyzes a program and identifies things the program could do.
uses rules, written by experts, this can be you! to recognize these capabilities.
63

github.com/fireeye/capa

Willi Ballenthin
williballenthin
Moritz Raabe
m_r_tz
64

Contributors:
Ana Maria Martinez Gomez Mike Hunhoff Blaine Stancill Matt Williams
and rest of FLARE (~200 years experience)


HA Architecture in DP
MMM & Memcached @DP

HA in DP

Web1

Web2

Web3

memcache

memcache

memcache

Writer DB

Reader DB

Web
Memcached Cluster
MMM

MMM

What is MMM
 Perl  Message between Monitor & Agent  Auto Failover for M/S
but MMM is not:  SQL router  Load Balancer

Products like MMM
 MHA  LVS + Heartbeat  Pacemaker + Heartbeat

MMM Internals
Monitor while(){
process_check_results check_host_states process_commands distribute_role send_status_to_agent s }

Agent while( read socket){
handle_command }

MMM architecture

Monitor

Master Slave

Master Slave

MMM architecture

Monitor

Master Slave

Master Slave

How MMM Do Failover

Monitor

Master vip1
Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

set global read_only=1 Monitor

Master vip1

Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

remove VIP Monitor

Master
Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

Master

Monitor
select MASTER_POS_WAIT()

Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

Monitor show master status

Master
Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

Monitor change master to

Master
Slave vip3

Master vip2
Slave vip4

How MMM Do Failover

Monitor vip1 online

Master
Slave vip3

Master vip1&vip2
Slave vip4

MMM
MMM in DP

MMM in DP

Master vip1

Master vip2

Frontend Group vip1 & vip2

Job Group vip5

Slave vip3 / vip5

Slave vip4

Backend Group vip3 & vip4

MMM
Problems in MMM

What's wrong with MMM
MMM is 1) fundamentally broken and unsuitable for use as a HA tool 2) absolutely cannot be fixed.
http://www.xaprb.com/blog/2011/05/04/whats-wrong-withmmm/

MMM Problem 1

set read_only is difficult on busy server
set read_only will be blocked by long running SQL

set global read_only=1

Master vip1

Master vip2

Monitor

Slave vip3

Slave vip4

MMM Problem 1

set global read_only=1 Monitor

Master vip1

Slave vip3

Master vip2
Slave vip4

MMM Problem 1 -- Fix

remove vip Monitor

Master vip1
Slave vip3

Master vip2
Slave vip4

MMM Problem 1 -- Fix

kill uncommited process
Monitor

Master
Slave vip3

Master vip2
Slave vip4

MMM Problem 1 -- Fix

kill uncommited process
Monitor

Master
Slave vip3

Master vip2
Slave vip4

MMM Problem 1 -- Fix

Monitor
show master stats change master to

Master
Slave vip3

Master vip1&vip2
Slave vip4

MMM Problem 2
Writer VIP cannot be accessed when slave is far behind master

Master

Monitor
select MASTER_POS_WAIT()

Slave 30m Behind

Master vip2
Slave vip4

MMM Problem 2
Writer VIP cannot be accessed when slave is far behind master

Monitor
30 minutes later .......

Master
Slave vip3

Master vip1&2
Slave vip4

MMM Problem 2 -- Fix
Record the position on M2 and Bring on VIP1 immediately

Master

Monitor
select MASTER_POS_WAIT

Slave 30m behind

Master vip2
Slave vip4

MMM Problem 2 -- Fix
Record the position on M2 and Bring up VIP1 immediately

Master

Monitor
show master status $file $position

Slave 30m behind

Master vip2
Slave vip4

MMM Problem 2 -- Fix
Record the position on M2 and Bring up VIP1 immediately

Monitor Bring up VIP1

Master
Slave 30m behind

Master vip1&2
Slave vip4

MMM Problem 2 -- Fix
Record the position on M2 and Bring up VIP1 immediately

Master

Monitor
select MASTER_POS_WAIT

Slave 30m behind

Master vip1&2
Slave vip4

MMM Problem 2 -- Fix
Record the position on M2 and Bring up VIP1 immediately

Master

Monitor
change master to M2 $file $position

Slave 30m behind

Master vip1&2
Slave vip4

Memcached
memcached in DP

Memcached in DP

Main Ring

Node1 Node2

Node3 Node3

Backup Ring

Memcached in DP

set key1

Client

set key1

Main Ring

Node1 Node2

Node3 Node3

Backup Ring

Memcached in DP

get key1

Client

Main Ring

Node1 Node2

Node3 Node3

Backup Ring

Memcached in DP

get key1

Client

get key1

Main Ring

Node1 Node2

Node3 Node3

Backup Ring

Memcached
Problems We Met

MultiGet Hole
MultiGet / Gets: get command with multiple keys
Purpose: Omit the multiple network roundtrips, when issuing multiple single get commands.
Problem: The gets command will be slower when we add more nodes into the cluster.

MultiGet Hole

Client

get key1,key2 ... key12

Node1

Node2

Node3

MultiGet Hole

Client

<node1> get key1,key4,key7,key10 <node2> get key2,key5,key8,key11 <node3> get key3,key6,key7,key12

Node1

Node2

Node3

MultiGet Hole

Result v1,v4,v7,v10

Client

<node2> get key2,key5,key8,key11 <node3> get key3,key6,key9,key12

<node1> get key1,key4,key7,key10

Node1

Node2

Node3

MultiGet Hole

Result v1,v4,v7,v10 v2,v5,v8,v11

Client

<node3> get key3,key6,key9,key12

<node2> get key2,key5,key8,key11

Node1

Node2

Node3

MultiGet Hole

Result v1,v4,v7,v10 v2,v5,v8,v11 v3,v6,v9,v12

Client

<node3> get key3,key6,key9,key12

Node1

Node2

Node3

MultiGet Hole

Result v1,v5,v9 v2,v6,v10 v3,v7,v11 v4,v8,v12

Client

One more Round Trip !!!!

Node1

Node2

Node3

Node4

Cache Miss Storm
Happens when :  Memcached failed  Key expire
Ideal Cache Miss Procedure 1. get memcached miss 2. query MySQL 3. set memcached

Cache Miss Storm
In Fact ! 1. get memcached miss 2. massive concurrent query on MySQL
(timeout) 3. nothing be set into memcached 4. cache miss forever....

Cache Miss Storm -- Our Solution
Hot Key 0. set local cache after every get 1. get memcached miss 2. add lock key
a. if (success) query MySQL & set memcache b. if (failed) return local cache
* Only one web can query MySQL for missed key at the same time.

VPL
VPL: virtual packet loss no actual packet loss, but vm response time exceeds the retransmission timeout
Two network-bounded virtual machine put together result in huge get timeout.

VPL
A normal retransmission consume 50ms, which exceeds our Memcached timeout. timeout == no result == cache miss Result: another kind of cache miss storm

Avoid VPL
 Split Network-Bound biz on different real machine.
 Maybe UDP?  Maybe fast retransmission?

Thanks!
Q&A


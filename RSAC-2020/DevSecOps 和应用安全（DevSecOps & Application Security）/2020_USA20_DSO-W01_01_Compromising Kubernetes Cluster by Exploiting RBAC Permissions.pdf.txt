SESSION ID: DSO-W01
Compromising Kubernetes Cluster by Exploiting RBAC Permissions

Eviatar Gerzi
Security Researcher CyberArk @g3rzi

#RSAC

#RSAC
# whoami
Eviatar Gerzi (@g3rzi) Security Researcher at CyberArk
2

#RSAC

https://websitesetup.desi/pokemon-go-mod-apk-v0-147-1free-download-2019/
3

https://www.p okemon.com/u s/pokedex/dra gonite

#RSAC
https://websitesetup.desi/pokemon-go-mod-apk-v0-147-1free-download-2019/
4

#RSAC
Kubernetes
5

#RSAC
Kubernetes
"AN OPEN-SOURCE SYSTEM FOR AUTOMATING DEPLOYMENT, SCALING AND MANAGEMENT OF CONTAINERIZED APPLICATIONS."
6

#RSAC
Kubernetes ­ containerized application
APPLICATION + DEPENDENCIES
- Isolated - Quickly - Reliably
7

#RSAC
https://hackernoon.com/practical-introductionto-docker-compose-d34e79c84c2b6

Kubernetes architecture

kubectl

controller manager

Master

kubelet

etcd

API server

scheduler

Kube proxy 9

#RSAC
Worker Pod
Container
9

#RSAC
Access to Kubernetes API

#RSAC

Authentication Authorization

Admission Control

11

#RSAC
Authentication

Normal User

Service Account

12

Authentication
Normal User

#RSAC
Service Account

·X509 Client Certs ·Static Token File ·Static Password File

· Service Account Tokens

·OpenID Connect Tokens

·Webhook Token Authentication

·Authenticating Proxy

13

#RSAC
Service Account
"When you create a pod, if you do not specify a service account, it is automatically assigned the default service account in the same namespace."
14

Service Account
NOT specify
Specify

#RSAC
default service account
ANY service account in the namespace
15

#RSAC
Service Account Token Location

pod container
service account token

/var/run/secrets/kubernetes.io/serviceaccount/token /run/secrets/kubernetes.io/serviceaccount/token

16

#RSAC
Service Account Token
17

#RSAC
18

#RSAC
Authorization

#RSAC
Role-Based Access Control (RBAC)

Users\ Groups

Roles

Permissions Resources

20

#RSAC
Role-Based Access Control (RBAC)

(Cluster)RoleBinding

(Cluster)Role

Subject

Verbs: list Resources: secrets

John

21

#RSAC
Role-Based Access Control (RBAC)
"Fine-grained role bindings provide greater security, but require more effort to administrate."
22

Role-Based Access Control (RBAC)

Subject 1

(Cluster)RoleBinding 1

Subject 2 Subject 3 Subject 4

(Cluster)RoleBinding 2 (Cluster)RoleBinding 3 (Cluster)RoleBinding 4
23

#RSAC
(Cluster)Role 1 (Cluster)Role 2 (Cluster)Role 3 (Cluster)Role 4

#RSAC
Role-Based Access Control (RBAC)
(Cluster)RoleBindings
(Cluster)Roles
Subjects
24

Subjects

#RSAC
(Cluster)RoleBindings (Cluster)Roles

25

#RSAC
Risky Permissions
26

#RSAC
Examples
No. 1
27

#RSAC
Creating a pod ("hot pod") with privileged service account
28

#RSAC
Examples - No. 1
29

#RSAC
Examples - No. 1
serviceAccountName:<service_account_name>
30

Examples - No. 1
Create Pod with privileged token Send the secrets back to the attacker
Master Node
API server

#RSAC
Privileged token
Use the privileged token to list all secrets

31

Examples - No. 1

#RSAC
(get, list, watch)->(secrets)

32

#RSAC
Examples - No. 1

List secrets and send them to the attacker

Read the privileged token
33

#RSAC
Demo

#RSAC

Escape from a Pod #1

#RSAC
Mount host device to the container

36

Escape from a Pod #2

Use docker client to view other containers

#RSAC

37

#RSAC
Pods resource
38

#RSAC
There are 8 ways to create a Pod
39

#RSAC

ReplicationController ReplicaSet Deployment DaemonSet StatefulSet

Job

CronJob

Pod

Container 40

#RSAC
Examples
No. 2
41

#RSAC
Reading a secret Brute-forcing token IDs
42

#RSAC
Examples ­ No. 2: Reading Secret
43

#RSAC
Examples ­ No. 2: Reading Secret
"get" ­ must specify the object name "list" ­ list all objects
44

#RSAC
Examples ­ No. 2: Reading Secret
?
# kubectl get secret <secret_name>
45

Examples ­ No. 2: Reading Secret

#RSAC

(get,list,watch)->(secrets)

(create,delete,list,patch,watch)->(pods)

(delete,get,list,patch,update,watch)->(*) (delete,deletecollection,get,list)->(*) (create,delete,list,patch,watch)->(pods)
(list,watch)->(*) (delete,get,list,watch)->(secrets)
46

#RSAC
Examples ­ No. 2: Reading Secret

bootstrap-signer-token-9c6q8

known prefix

random token ID

47

#RSAC
Examples ­ No. 2: Reading Secret
We have the prefix, but not the token ID
48

#RSAC
Examples ­ No. 2: Reading Secret
49

#RSAC
Examples ­ No. 2: Reading Secret
27 characters
50

Examples ­ No. 2: Reading Secret

#RSAC

275 = 14,348,907 possibilities

Guessing < ~3 hours
51

#RSAC
Built-in Privileged Escalation Prevention

#RSAC
"The RBAC API prevents users from escalating privileges by editing roles or role bindings."
53

#RSAC
"A user can only create/update a role if they already have all the permissions contained in the role, at the same scope as the role"
54

#RSAC
55

#RSAC
56

#RSAC
57

#RSAC
Best Practices
https://www.mybestwebsitebuilder.com/tools/password-strength-checker

#RSAC
Best Practices 1. Prevent service account token automounting on pods (automountServiceAccountToken: false in version 1.6+) 2. Grant specific users to (Cluster)RoleBindings 3. Use Roles or RoleBindings instead of ClusterRoles or ClusterRoleBindings 4. Namespaces !
5. Use KubiScan
59

#RSAC
- Risky (Cluster)Roles - Risky (Cluster)RoleBindings - Risky Subject (Users, Groups and
ServiceAccounts) - Risky Pods\Containers - All mounted volumes to Pods - All mounted environment variables to
Pods - Privileged Pods (--privileged) - Other cool stuff 
https://github.com/cyberark/KubiScan
60

#RSAC
61

#RSAC

#RSAC
Conclusions

#RSAC
Conclusions
- RBAC ­ better security, more effort to administer - Easy to lose control over privileged service account
tokens - Avoid mounting privileged service accounts - Follow the least privilege principle and use
namespaces
64

#RSAC
Apply what you have learned today

Next week

Identify containers with privileged tokens

3 months
+6 months

Search and find: - Privileged containers - Containers with sensitive data
Have cluster with: - Namespace separation - No privileged containers
65

#RSAC
# cat final.txt Any questions?
Thanks ! github.com/cyberark/KubiScan
@g3rzi
66



     

# 
·       IoT
·       IoT
·     AIAI

# 
· PART I · 
· 
· 
· 
·  · PART II
·  &  · 




# 

O(P) = P'

· P' vs P          PP' 

· P'

 

 

P

 /

P'

# 


 APT  C2   ...




 VMProtect  Themida  O-LLVM ...




# 
·   , 
·   , 
·   , 
·   
[1]Collberg C, Thomborson C, Low D. A taxonomy of obfuscating transformations[R]. Department of Computer Science, The University of Auckland, New Zealand, 1997.

# 
· VMProtect  Nand  Nor
·    Fredkin  Toffoli
·   AOI  OAI

# 




x86-64 Clang 12.01, -O3

# 




...

# 
·  vs   AOI(a, b, -1) = ~(a|(b&-1)) = ~(a|b) = Nor(a, b), b & -1 = b  b & -1 = b, a & 0 = 0, a | 0 = a, ..., ... ,    
·     A + AB = (1 + A)B = A  (A + B)(A + C) = A + AC + AB + BC = A + BC ...
LLVM InstCombine Pass lib/Transforms/InstCombine/Inst CombineAndOrXor.cpp

# 




1

2

1

·   /      

2 3

# 
· O-LLVM  x * (x + 1) % 2 == 0 ...  Angr[1]
· API  CreateFile0 ...  API
[1]"Manufacturing resilient bi-opaque predicates against symbolic execution," Hui Xu, Yangfan Zhou, Yu Kang, Fengzhi Tu and Michael R. Lyu, in Proc. of the 48th IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), Luxembourg City, Luxembourg, June 1-5, 2018.

# RANGE DIVIDER

unsigned int hash = 0; for (int i = 0; i < strlen(str); i++, str++) {
char chr = *str; hash = (hash << 7) ^ str[i]; } if (hash == 0x49439903) do_m();

unsigned int hash = 0; for (int i = 0; i < strlen(str); i++, str++) {
char chr = *str; if (chr > 44)
hash = (hash << 7) ^ chr; else
hash = (hash * 128) ^ chr; }
if (hash == 0x49439903) do_m();

Banescu[1]Angr  

[1]Banescu S, Collberg C, Ganesh V, et al. Code obfuscation against symbolic execution attacks[C]//Proceedings of the 32nd Annual Conference on Computer Security Applications. 2016: 189-200.

# FOR LOOP

if (i1 == 0x123456) do_m();

int ch1 = i1 & 0xFF; int ch2 = (i1 & 0xFF00) >> 8; int ch3 = (i1 & 0xFF0000) >> 16; char c1, c2, c3; for (int i = 0; i < ch1; i++)
c1++; for (int i = 0; i < ch2; i++)
c2++; for (int i = 0; i < ch3; i++)
c3++; if (c1 == 0x12 && c2 == 0x34
&& c3 == 0x56) do_m();

Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, Jean-Yves Marion. How to Kill Symbolic Deobfuscation for Free (or: Unleashing the Potential of Path-Oriented Protections). In Proceedings of the 35th Annual Computer Security Applications Conference (ACSAC 2019).

# 

 2  Secret finding    FOR LOOP[]DFS
256   Exhaustive path coverage
   RANGE DIVIDER

FOR LOOP RANGE DIVIDER

Secret finding

×

Exhaustive path coverage



# HASH

Sharif[1]HASH MD5SHA256HASHZ Wang[2] 3x+1

if (x == c) { Basic_Block_Code
}

if (Hash(x) == HC) { Decr(Basic_Block_CodeE, x) Basic_Block_CodeE
}

x 

[1]Sharif M I, Lanzi A, Giffin J T, et al. Impeding Malware Analysis Using Conditional Code Obfuscation[C]//NDSS. 2008. [2]Wang Z, Ming J, Jia C, et al. Linear obfuscation to combat symbolic execution[C]//European Symposium on Research in Computer Security. Springer, Berlin, Heidelberg, 2011: 210-226.

# 3x+1



,  x

3 1, 

1

   3x+1

if ( x == 30) do_m() ;

 85 * 3 + 1 mod 256 == 0
y = x + 1000; while (y > 1) {
if (y % 2 == 1) y = 3 * y + 1;
else y = y / 2;
if ((x - y > 28) && (x + y < 32)) { do_m(); break;
} }

[1]Wang Z, Ming J, Jia C, et al. Linear obfuscation to combat symbolic execution[C]//European Symposium on Research in Computer Security. Springer, Berlin, Heidelberg, 2011: 210-226.




# ForObfs
ForObfs for (int i = 0; i < ch1; i++)
c1++; for (int i = 0; i < ch2; i++)
c2++; for (int i = 0; i < ch3; i++)
c3++; if (c1 == 0x12 && c2 == 0x34
&& c3 == 0x56) do_m();

AngrFor(k==2) Deadended
· 0.1-0.3s · 0.02s
For   
· 

ime



Timen Forn  

# 3x+1Obfs

y = x + 1000; while (y > 1) {
if (y % 2 == 1) y = 3 * y + 1;
else y = y / 2;
if ((x - y > 28) && (x + y < 32)) { do_m(); break;

3x+1  · 3x+1 · 1
· 5000-55001 50-125
 ·  · 

# HASH
SharifHASH · MD5SHA256HASHC8
 · HASH
 · Cryptographic primitivesintint64
·  
if (Hash(x) == HC) Decr(Basic_Block_CodeE, x) Basic_Block_CodeE




# 3x+1

AngrBIN-O0



Fork

31Fork

Fork

231

deadended stash



3x+10 ... Insight

1431655765 * 3 + 1 = 0   y > 0xFFFF 

· 3x+1 · n  · x / 2 3 * x + 1

x / 2

# 

 

·  , . , 
, . .

·  FOR 1,  (i % 2) ,  (i % 2) .  FOR 1
 1.

,  x P

1 
 m: n:

 x ,  

 n ,  exp_a & exp_b ,  3.

FOR 1 for (i = 0; i < x; i++)
if (i % 2) ch--
else ch += 3

# (DecObfs)
· f(u) + LOOP == 31 · f(u)[4][32, 0xFFFFFFFF]

· u % 4 !=(==) 0 ·  ·  · f(u)(u * 3 / 4)44  · 

0x1C71C71C = f  a / 9

·  ·  =>  => 
· 

# 
FOR 
int i; scanf("%d", &i); int x = global_table[i];  
·  · 
·  · 

# 
 a = table[i]  · Single-object modelEXEFuzzBall
·  i == 12 · Forking modelKLEE
· iFork · Merging modelAngr
· Forking model Or(i=1, i=2, ...), If(i == 1, a = table[1], If(i == 2, a= table[2], If....))
· Flat memory modelNone ·  
[1]Timotej Kapus and Cristian Cadar. A segmented memory model for symbolic execution[C]. //In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering.

# ""
x * (x + 1) % 2 == 1 
table60, 1, 2, ...255x table6
""Angr 0.05s62s
ForObfs  

# 

Angr

· 

· T1 = 17s · Angr

T1

· 

· T2 = 45s · 0.05s45s

T2

· AngrMerge Memory Model · x""
""

# HASH Obfs
·  ·  ·  ·  
·  · ff(a)  f(b) a  bf(a) = f(b)a = b · 
·  AESS-BOXFeistel if   

# 
· Feistel  Feistel · Input: L, RG · L ^= G(R) · L, R = R, L · L ^= G(R)
·  · f(x) = ax + b mod mGCD(a, m) = 1intm = 2
·  · Input: a, bRotateL · a  RotateL(a + b, b) · b  RotateL(a + b, a)
·  · f(a) = a ^ (a <<(>>>) n)>>>0
·  ·  n  m  m > nSHA-1

# Feistel
FeistelI0 0, 0 , 1 1, 1 , 0 1,  0  1 0 0 1   1 
0 0 0 1 1 1   1) 0 1, 0 1 0 0 0 = 1 0 0 0 1 2) 0 1, 0 1   0 G R1 0 1 3) 0 1, 0 1 2) f(x)

# Feistel
a1  a2a1  b  a2  b  Feistel
f(L, R) = (L  G(R), R  G(L  G(R)))  a  b = f(a) ^ g(b)fg  a1  a2 a1  b = a2  bf(a1) ^ g(b) = f(a2) ^ g(b)f, gf(a1) = f(a2)

# 
·  4 data 8 
·  4 Feistel
· Feistelmy_xor
· Feistel

· Angr6h
· Insight · Feistel ·  64Angr  ·  ·  

# ForObfs

· Insight ·  ""  ·  
·  · Angrdeadended 400s · 4 400 28.4  · 400s  ·  · Angr  ·  · Angr  · Angr2h




# DecObfs

· AngrDecObfs2hAngr 
DecObfs Fork
DecObfs vs 3x+1Obfs · 
· 
·  · 

# DecObfs vs 3x+1Obfs



 



DecObfs

1-10000000

24

88, 104, 108, 128, 14(

48152

100000000)



300 BYTE

3x+1Obfs 152 6( 100000000)
76 BYTE

 DecObfs 3x+1
3x+1

·  · DecObfs3x+1Obfs2.4 DecObfs243x+1Obfs1523x+1ObfsDecObfs 6.3DecObfs3x+1Obfs
·  · 3x+1Obfs  DecObfs

#  vs ForObfs

 k = 2ForObfs1/151h Timeout

ForObfs

 2 for128









100000000

2s

ForObfs

100000000

35s

ForObfs BINvolatile......

ForObfs 256    

# 

 



Angr

x * (x + 1) % 2 != 0

< 1s

7 * y * y ­ 1 == x * x

< 1s

x - y + x ­ z != (x ^ y) + 2 < 1s * (x | (~y)) + 2 + (~z - ~x)

 63s 221s 392s

 





x * (x + 1) % 2 != 0 2

x * (x + 1) % 2 != 0 3

x - y + x ­ z != (x 3 ^ y) + 2 * (x | (~y)) + 2 + (~z - ~x)

 x x = x * y x = x + y + z z = x * y * z

 227s 332s > 3h  

Part II -
Secure Multi-party Computation  ·  ·  ·  ·  ·  ·  · ......

(Garbled Circuit)
   

Alice(X)
1~10  
 






 Alice


Bob (Y) 

XY1~10 



Alice(X)

Bob (Y)


 c+i p (i=1~10)

c=N-Y

n


N

X +1

{k1,k2,k3,...,k10} p
YX Y>X

kYn (mod p) XY1~10 



 a



 b


· Alice  · Alice  Bob  · Bob  · 


 f

f(a,b)

abc
xor xor
and xor


· Alice l X0,iX1,i 01
· X0,iX1,i  · 
· 

(Homomorphic encryption)


X+Y

Decrypt

Decrypt X
Decrypt Y

Dec(X) Dec(Y)



Dec(X+Y) =
Dec(X)+Dec(Y)

Decrypt X·Y

Decrypt

X

Dec(X)

Decrypt

Y

Dec(Y)

Dec(X·Y) =
Dec(X)·Dec(Y)



 Craig Gentry

A'=Enc1(A)



f'(x)=Enc2(f(x)) Obfuscate f''(x)

Enc3(B)=B'=f''(A) Enc3(B) Dec3(B')

 Enc1  Enc2  Dec3  Enc1Enc2 



A

A'=Enc1(A)

f(x)

f'(x)=Enc2(f(x))

f''(x)

Enc3(B) =B' =f''(A)

Enc3(B)

Dec3(B')

B

A

f(x)

B



   

A

A'=Enc1(A)

Enc3(B)

=B' =f''(A)

Enc3(B)

f(x)

f'(x)=Enc2(f(x))

f''(x)

Dec3(B')

B

A

f(x)

B


 
 ·  · 

#  & 





  @   @ VXProtect

   ID chengrui191954


TEACHING THE NEW DOG OLD TRICKS
PHP7 Memory Internals for Security Researchers
Yannay Livneh | Security Researcher
© 2016 Check Point Software Technologies Ltd.

About Me
· Yannay Livneh · Security Researcher @ CheckPoint · Play w/
­ Networks ­ Embedded ­ Linux ­ Memory Corruptions ­ and stuff
.

AGENDA
· Introduction · PHP Unserialize · ZVAL System · Unserialize + ZVAL => Bugs · Allocator · Bugs + Allocator => Exploit · Q.E.D.
.

(THIS WORLD WE LIVE IN)

PHP ­ its interesting
· Widely used · Servers rule the world · PHP-7 - future
.

PHP Security
· Vulns vulns vulns · SQL Injection · XSS · Memory corruption?
­ Native functions ­ User input
· UNSERIALIZE
.

Unserialize History of Insecurity
· More CVEs than I can count · Object Injection (PoP) · Memory Corruptions · Generic Exploitation (@i0n1c)
.

Examples in the wild
.

PHP-7
· Released in December 2015 · New values (zval) system · New Memory Allocation · => previous exploitation irrelevant
.

Unserialize Nowadays ­ PHP-7
· Some CVEs · Object Injection (PoP) · Memory Corruptions · No Remote Exploits
.

UNSERIALIZE
(WHAT WE EXPLOIT)

Unserialize

Serialize/Unserialize

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{
}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;
}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;i:1;i:1337;
}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple";
}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple"; i:3;a:3:{
}}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple"; i:3;a:3:{s:1:"a";i:1;
}}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);

a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple";

i:3;a:3:{s:1:"a";i:1;i:0;O:8:"stdClass

":0:{}

}}

Serialization
$val = array( NULL, 1337, `apple', array( `a' => 1, new stdClass(), 7331 )
);
serialize($val);
a:4:{i:0;N;i:1;i:1337;i:2;s:5:"apple"; i:3;a:3:{s:1:"a";i:1;i:0;O:8:"stdClass ":0:{}i:1;i:7331;}}
.

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');
var_hash

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1

array

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2

array 0 NULL

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2 3

array 0 NULL 1 1337

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2 3 4

array 0 NULL 1 1337 2 `apple'

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2 3 4 5

array 0 NULL 1 1337 2 `apple' 3

array

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2 3 4 5 6

array 0 NULL 1 1337 2 `apple' 3

array

`a'

1

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash 1 2 3 4 5 6 7

array 0 NULL 1 1337 2 `apple' 3

array

`a'

1

0 stdClass()

Unserialization
unserialize(`a:4:{i:0;N;i:1;i:1337; i:2;s:5:"apple";i:3;a:3:{s:1:"a";i:1; i:0;O:8:"stdClass":0:{}i:1;R:3;}}');

var_hash

1

array

2

0 NULL

3

1 1337

4

5 6

2 `apple' 3

array

`a'

1

7

0 stdClass()

1

.

Unserialize Take Away
· Complicated format · User control allocation · "Global" references · Re-use values
.

(HOW VALUES ARE STORED)

Zvals
· Holds PHP variables · $x = 1; · Features:
­ Garbage collection ­ References: $y = &$x;
.

Old (PHP-5) Zvals
· Zval is a pointer · Zval creation => allocate struct · GC ­ refcount + cycle detection · Reference ­ point same struct
.

New Zvals motivation
· Less derefs · Less allocations · Designed for embedding
­ In structs ­ In arrays ­ On the stack
.

New Zvals
· Zval is a struct · Only value & type · zend_value: union
­ primitive value ­ pointer to struct
.

Example: int

$x = 1337;

zval struct value type

1337 IS_LONG

.

New Zvals - GC
· Refcount depends on type
­ Not refcounted: primitives ­ Refcounted: complex types

Example: string

Example: string

$x = "apple";

zval struct value type

IS_STRING

_zend_string

refcount

0 1

hash

0

len

5

val[]

`a'

`p'

`p'

`l'

`e'

`\0'

.

New Zvals ­ references
· New type: reference
$x = 1337;
zval struct ($x) value 1337 type IS_LONG

New Zvals ­ references
· New type: reference
$x = 1337; $y = &$x;

zval struct ($x) value 1337 type IS_LONG

_zend_reference

refcount 0

val

zval struct

value 1337

type

IS_LONG

New Zvals ­ references
· New type: reference
$x = 1337; $y = &$x;

zval struct ($x) value type IS_REFERENCE

_zend_reference

refcount 1

val

zval struct

value 1337

type

IS_LONG

New Zvals ­ references
· New type: reference
$x = 1337; $y = &$x;

zval struct ($x)

value

_zend_reference

type IS_REFERENCE

refcount 2

zval struct ($y) value type IS_REFERENCE

val

zval struct

value 1337

type

IS_LONG

.

ZVALS Take Away
· Designed for embedding · Less derefs & heap use · References - complicated
.

(AKA vulns)

Use Uninitialized Value
· SplObjectStorage::unserialize
· Which leads to
­ rval = &inf
.

Type Confusion
· Making a Reference... · Change type · SplObjectStorage::unserialize
.

Type Confusion
php_var_unserialize(&entry)

Type Confusion
php_var_unserialize(&entry)
zval struct (entry) value type IS_OBJECT
_zend_object ....

Type Confusion
php_var_unserialize(&entry) if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ }
zval struct (entry) value type IS_OBJECT
_zend_object ....

Type Confusion
php_var_unserialize(&entry) if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ } php_var_unserialize(&inf)
zval struct (entry) value type IS_OBJECT
_zend_object ....

Type Confusion

php_var_unserialize(&entry) if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ } php_var_unserialize(&inf)

zval struct (entry) value type IS_OBJECT

_zend_reference

refcount 0

val

zval struct

value

type IS_OBJECT

_zend_object ....

Type Confusion

php_var_unserialize(&entry) if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ } php_var_unserialize(&inf)

zval struct (entry) value type IS_REFERENCE

_zend_reference

refcount 1

val

zval struct

value

type IS_OBJECT

_zend_object ....

Type Confusion

php_var_unserialize(&entry) if (Z_TYPE(entry) != IS_OBJECT) { /* ERROR!!! */ } php_var_unserialize(&inf)

zval struct (entry) value type IS_REFERENCE
zval struct (inf) value type IS_REFERENCE

_zend_reference

refcount 2

val

zval struct

value

type IS_OBJECT

_zend_object ....

.

Use After Free
· Pointing to dynamic struct · var_unserializer.c:process_nested_data
· data points to ht · data stored in var_hash · when ht resized · ht reallocated
.

var_hash

Use After Free
zval struct value type IS_OBJECT
_zend_object ... properites

zval struct

value 0

type

IS_LONG

zval struct value 1 type IS_LONG

zval struct

value 0

type

IS_LONG

zval struct value 1 type IS_LONG

zval struct

value 2

type

IS_LONG

.

Use After Free
· Not very common · Unserialize ensure size ht · Yet... · __wakeup define property · DateInterval add properties
.

Bugs Take Away
· More unserialize vulns · Different vulns · Use freed values
.

(WHERE MEMORY COMES FROM)

Old (PHP-5) Allocator
· Heap · Meta data per slot
­ Size ­ Flags
· Free List
.

PHP-7 Allocator
· Complete Rewrite · Bins · Free Lists
.

Allocator
· Allocate CHUNK from OS (2MB) · Divide to PAGES (4096B) · First page ­ descriptor
­ List of allocated and free pages ­ Pointers to BINS
· BIN
­ free list ­ By size ­ Multiple pages
.

CHUNK
chunk descriptor
free_slots
page_info

New CHUNK

.

CHUNK
chunk descriptor
free_slots
page_info
16 ...

New BIN

.

emalloc(size)
bin_num = size2bin(size)
if NULL == heap->free_slots[bin_num] init_bin(heap, bin_num)
return pop(heap->free_slots[bin_num])

CHUNK
chunk descriptor
free_slots
page_info
16 ... 32

emalloc

.

efree(ptr)
chunk = ptr & MASK_2M page_num = (ptr & (! MASK_2M)) >> OFFSET_4K bin = page2bin(chunk, page) push(chunk->heap->free_slots[bin], ptr)

CHUNK
chunk descriptor
free_slots
page_info
16 ... 32

efree

.

Allocator Take Away
· Allocation predictability · Impossible free() arbitrary memory
­ Bit operations ­ Lookup in page descriptor
· Abuse free list pointer ­ arbitrary write
­ Will explain in a few slides
.

EXPLOIT
(GETTING THINGS DONE)

Exploitation Stages
· Leak · Read · Write · Exec
.

Leak
· Abuse the Allocator  · Roughly based on @i0n1c's method · Serialize freed object · Allocator override · Read more freed data
.

Leak Theory
· Allocator free list · first sizeof(void*) point to next slot
· Read freed object · Read via pointer to next slot
­ i.e. read prev freed object
.

DateInterval
.

DateInterval

Heap Address Leak
· Allocate DateInterval · Allocate object to leak - string · Free both objects · Allocator point DateInterval to string · Allocator overwrite string with pointers · Serialize
.

DateInterval

DateInterval

DateInterval .

Read Memory
· If you control a zval ­ forge a DateInterval · If you don't
­ Free DatePeriod object ­ serialization - pointer to strcpy ­ More info in paper
.

Write Memory
· free() strings · String contain pointers · Abuse free list
­ inc/dec => point to free slot
· Allocate memory · Allocation of arbitrary pointer
.

Freeing Strings
· Unserialize hash table (array) · Use same key twice
­ e.g. a:2:{s:4:"AAAA";i:0;s:4:"AAAA";i:0;}
· Second time - key freed
.

Abuse Possible
· Slot next ­ first field · Refcount is first field · e.g. _zend_object
· UAF ­ add/dec ref · Actually inc/dec next
.

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:11 ;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c53270 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c53272 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c53274 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c53276 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c53278 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c5327a 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i:11;...
0xb5c531e0: 0xb5c5327c 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;i...
0xb5c531e0: 0xb5c5327e 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Abusing Free List
...s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:"AAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA";a:2:{s:31:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";i:0;s:31:" AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";a:0:{}}i:3;C:11:"ArrayObject":18:{x:i:0;r:1 1;;m:r:2;}i:4;r:11;i:5;r:11;i:6;r:11;i:7;r:11;i:8;r:11;i:9;r:11;i:10;r:11;...
0xb5c531e0: 0xb5c53280 0x80000001 0x00000012 0xfffffffe 0xb5c531f0: 0xb72170bc 0x00000000 0x00000000 0x00000008 0xb5c53200: 0xffffffff 0x00000000 0xb6d3fca0 0x00414141 0xb5c53210: 0x00000002 0x00000007 0x0000000a 0xfffffff8 0xb5c53220: 0xb5c5f2c0 0x00000001 0x0000he0a0p0->1free_0lixst0[b0in0_0n0um00] 8 0xb5c53230: 0x00000000 0x00000000 0xb6d3fca0 0x00000000 0xb5c53240: 0x00000001 0x00000006 0xb727e264 0x0000001f 0xb5c53250: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53260: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c53270: 0xb5c532d0 0x00000006 0xb727e264 0x0000001f 0xb5c53280: 0x41414141 0x41414141 0x41414141 0x41414141 0xb5c53290: 0x41414141 0x41414141 0x41414141 0x00414141 0xb5c532a0: 0x00000002 0x00000007 0x00000012 0xfffffffe 0xb5c532b0: 0xb72170bc[Restri0ctexd]0O0NL0Y f0or0de0sig0na0ted gro0upxs 00000000 0x00000008
and individuals

Code Execution
· forge a zval ­ override callback · If not ­write primitive
.

Exploit Take Away
· Use the allocator · Re-usable primitives · Primitives => remote exploit
.

Conclusions
· High level > low level · New design ­ new vulns · Exploiter friendly allocator · unserialize => practically unauthorized RCE
.

More Info
· http://blog.checkpoint.com · http://bugs.php.net · https://nikic.github.io · Contact me:
­ yannayl@checkpoint.com ­ Twitter: @yannayli ­ yannayl@*
QUESTIONS?
.


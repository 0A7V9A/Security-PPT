SESSION ID: HTA-T02
My Fuzzy Driver

Eran Shimony
Senior Security Researcher CyberArk @EranShimony

Mark Cherp
Senior Security Researcher CyberArk @OcamRazr

#RSAC

#RSAC
Disclaimer
Presentations are intended for educational purposes only and do not replace independent professional judgment. Statements of fact and opinions expressed are those of the presenters individually and, unless expressly stated to the contrary, are not the opinion or position of RSA Conference LLC or any other cosponsors. RSA Conference does not endorse or approve, and assumes no responsibility for, the content, accuracy or completeness of the information presented. Attendees should note that sessions may be audio- or video-recorded and may be published in various media, including print, audio and video formats without further notice. The presentation template and any media capture are subject to copyright protection.
©2022 RSA Conference LLC or its affiliates. The RSA Conference logo and other trademarks are proprietary. All rights reserved.
2

#RSAC
TL;DR
kAFL vs Drivers == Bugs
3

#RSAC
Our Menu

Target
What to attack and how?

Internals
Healthy dose of Windows

Bugs
Vulnerabillities deep dive
Fuzzing
kAFL setup with some tweaks

Automation
Discovery, harness and grammar

4

#RSAC
Target
What to attack and why?
5

#RSAC
Don't run away from Windows
· We aim to escalate privilege from a weak point, accessible drivers are a good candidate · Windows has more than 300 drivers with tons of legacy code written in C · Windows is "considered" to be closed source, which makes it harder and less explored · Windows drivers might be challenging but they are also rewarding 
6

#RSAC
Internals
Healthy dose of Windows
7

#RSAC
Windows' privilege level architecture

Sandboxed Processes

Non-Admin Processes

Services/Admin Processes

Kernel/Drivers

Devices/Hardware

User mode Kernel mode

8

#RSAC
Windows Drivers 101

Part of the kernel
· An extension of the Windows kernel · Share System's address space · Essentially a part of the kernel

Signing
· Must be digitally signed · Driver signing can be disabled · Requires Admin+

Responsibility
· Talking with hardware, devices · Filtering · Not blue screening your machine

9

Too many Driver models

WDM

WPF

Fast I/O
WMI

WSK NDIS

KMDF
Win32 k
WDD M

UMDF
VSC VSP
Filter Drivers

#RSAC
10

WDM Drivers

PERSONAL DATA

Age Usage Successor Location Amount

23 Years Abundant KMDF Windows OS Over 200

PERCENTAGE OF TOTAL
70%

STATS
Flexibility Development Skills Security Documenter
PURPOSE
Talking with devices, power management... Supply kernel support for applications

#RSAC
11

#RSAC
Bugs
Vulnerabillities deep dive
12

#RSAC
Driver Bug Hunting 101

Access
Which driver do I have access to? What are my permissions?

Communication
How do we communicate with the driver? How does it parse user data?

13

#RSAC
Driver's Anatomy I
Access
In Windows, you talk to a driver via a device The driver creates a device, and it should specify which users can access it. It uses SDDL string for it, or defines it in the inf file:
· IoCreateDevice() or IoCreateDeviceSecure()
Followed by exposing the device to the user via calling:
· IoCreateSymbolicLink() or IoRegisterDeviceInterface()
The user opens a handle to the device via calling CreateFile()\NtCreateFile()
14

#RSAC
Show me some permissions
15

#RSAC
Driver's Anatomy II
Communication
The Driver object registers dispatch routines through DriverObject->MajorFunction[IRP_MJ_XXX] The Dispatch routines are invoked by the IoManager when the following operations are done on the device:
· Create - NtCreateFile · Close - NtCloseFile · Read - NtReadFile · Write - NtWriteFile · Device_Control ­ DeviceIoControl -> FileIoControlDevice
These dispatch routines our initial go-to places
16

#RSAC
Typical DriverEntry
17

#RSAC
Dispatch Routine
18

#RSAC
IRPs
I/O request packet, is a struct that has all the parameters any of the dispatch routines would ever need, generated when an action is performed on a device
The driver receives a pointer to the generated IRP structure by the IoManager, it consists of: StackLocation ­ holds many important members Requestor mode ­ Kernel or User Buffers ­ Depends on the transfer type IoStatus.Information ­ How many bytes are written to the output buffer
A misuse of any of these fields would probably cause a bug
19

How to generate IRPs
BOOL DeviceIoControl( HANDLE hDevice,
DWORD dwIoControlCode,
LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped );

#RSAC
20

#RSAC
IOCTL Code

32-bit IOCTL
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0

Required Access

Transfer Type

21

#RSAC
Required Access
· Two bit number ­ describes the required permissions to send the DeviceIoControl request, it is based on your permissions in the call to NtCreateFile.
· There are four different options:  · FILE_ANY_ACCESS · FILE_READ_ACCESS · FILE_WRITE_ACCESS  · FILE_READ_ACCESS | FILE_WRITE_ACCESS 
22

#RSAC
Transfer Type
· The two least significant bits ­ describe how the IoManager treats user's data, there are many nuances the driver developer must know
· There are four different options:  · METHOD_NEITHER · METHOD_BUFFERED · METHOD_IN_DIRECT · METHOD_OUT_DIRECT
23

#RSAC
METHOD_NEITHER = Mother of all evil
· The two bits are on -> ioctl number ends with 11 · The IoManager is lazy, the buffers and their lengths reside in User-Mode, the kernel
does not copy them to kernel space, they can be paged-out · The input and output buffers are:
· Irp->CurrentStackLocation.Parameters.DeviceIoControl.Type3InputBuffer · Irp->UserBuffer · The user can allocate and deallocate the buffers making the pages invalid, so you must be cautious when dealing with them · Every access to the buffers must be in a try except block
24

#RSAC
Probing
· Probing validates that an address resides in User-Mode: · ProbeForRead (*Address, Length, Alignment) · ProbeForWrite (*Address, Length, Alignment)
· But if you don't probe or you do not use the function correctly, then: · It throws an exception on invalid address so the call must be inside a try except block · If Length is 0 it does nothing, it passes the validation without probing · If not probed and the kernel reads form it = BSoD or info leak · If not probed and the kernel writes to it = BSoD or arbitrary write
25

Bug Example I

METHOD_NEITHER ends with 11

#RSAC

#RSAC
Method_Buffered
· The two bits are off -> ioctl number ends with 00 · In METHOD_BUFFERED the IoManager copies the buffers and their lengths to the
kernel in a secure manner. Therefore, they don't reside in the user's memory space. · No need for probing, but if the buffer has embedded fields, like pointer addresses,
lengths and so on, they need to be treated properly! · The IRP buffer is used both for input and output:
· Irp->AssociatedIrp.SystemBuffer
27

Method_Buffered - Continued
· The Irp->IoStatus.Information indicates how many bytes are to be copied to user's OutputBuffer
· If Irp->IoStatus.Inforamtion > InputBufferLen and OutputBufferLen > InputBufferLen · The rest of the system buffer data copied to (OutputBuffer) is uninitialized data · SizeOfData = OutputBufferLen ­ InputBufferLen
· Would cause kernel leak unless the buffer is properly initialized · Assuming:
· OutputBufferLen = 0x1000, InputBufferLen = 0x8 · Irp->IoStatus.Inforamtion = OutputBufferLen
· Leakage of 0xFF8 bytes to user-mode

#RSAC
28

Bug Example II
METHOD_BUFFRED ends with 00

#RSAC

#RSAC
Direct I/O
· The Right bit is on = METHOD_IN_DIRECT and left is off 01 · The Left bit is on = METHOD_OUT_DIRECT and right is off 10
· The IRP supply two pointer to buffers, both in kernel: · Irp->AssociatedIrp.SystemBuffer ­ The input buffer · Irp->MdlAddress ­ A second buffer used or buffered
· The second buffer is the "direct" which always paged = faster access, this buffer can be used for input or output
· The kernel can also create an MDL with IoCreateMdl() followed by locking it with MmProbeAndLockPages() which would throw an exception on invalid page
30

#RSAC
Direct I/O MDL

· "An MDL is a structure that describes the fixed physical memory locations that comprise a contiguous data buffer in virtual memory"
· In simpler words, The MDL describes the data buffer at a fixed position in physical memory, which will always be paged in and locked (you need to do that) in memory. It is a double mapping, one for the user, and another for the kernel

Virtual Memory

U

buffer

K

buffer

Physical Memory
page

31

#RSAC
Bug Example III
· Most of the bugs involve not checking for null, as the user can send a null buffer, thus causing MmGetSystemAddressForMDLSafe() to be sad
· Also, if creating an MDL yourself in the kernel, make sure you use the correct virtual address of a buffer not like in here:

#RSAC
How to Be Lazy

Enumerate
Enumerate device names and discover
IOCTLs

Generate Generate harness

Fuzz
Fuzz with the generated harness

33

#RSAC
Automation
Discovery, harness and grammar
34

#RSAC
Device Handles and IOCTLs Discovery

Discover Devices

Enumurate Device Names and Discover IOCTLS
35

Discovering Accessible Devices
Get All Devices

#RSAC
Determine Max. Permisisons

Extract Device Names
36

IOCTLs Discovery

DriverEntry(...)

IOCTL Dispatch Routine

IOCTL Conditioning

#RSAC
Test IOCTLs

Track DriverObject

Track IOCTL code

Aggregate IOCTLS

37

#RSAC
Harness Generation

Standard Template

Set Device Name

Set IOCTL
Set IOCTL

Simple Inputs Validation
Run Input vs Target
38

#RSAC
Automation Summary

01 Discover Devices

03 Generate Harness

02 Discover IOCTLS

04 Fuzz
39

#RSAC
Grammar 101
· After discovering some bugs with a simple grammar, we started examining more advanced approaches · We know the shape of the "high-level" input passed to the IOCTL · We don't know how the "deserialized" data inside the driver looks like · We want to guide our Fuzzer towards relevant inputs and that's where grammar comes into play · Grammar is essentially a way to tell the Fuzzer which inputs are more likely to increase coverage
40

Grammar Approaches
Simple template matching (i.e. Regex)
Input-to-state correspondence (i.e. Redqueen)
Large-scale mutation (i.e. Grimoire)

#RSAC
41

#RSAC
Kernel Fuzzing
kAFL setup with some tweaks
42

#RSAC
Fuzzing Concepts
Feedback ­ Get feedback on target execution state
Fitness ­ Decide according to some metric (coverage) how to mutate
Mutated Inputs

Seed

Fuzzer

Feedback

Target
43

AFL Feedback

#RSAC
· The feedback is implemented by hooking each code block with a special report snippet
· Upon receiving a cue for entering a new block, the fuzzer updates the bitmap
· Instrumentation can be done during compile time, binary rewrite or dynamically
44

kAFL Feedback
· kAFL doesn't modify the target, instead it maps Intel PT to the coverage bitmap · Intel Processor Tracing is essentially a real-time CPU instructions tracing mechanism · Intel PT can trace a specific driver at an address range

Intel PT Data Target IP (0x1009) Target IP (0x1055)
Target Binary

Traces
Target IP (0x1000) Target IP (0x1004) Target IP (0x1009)

Traces 011001010010

#RSAC
45

kAFL Virtualization Infra

Guest

Harness Windows Driver
KVM-QEMU

#RSAC

Fuzzer

Host User

KVM Kernel Module

Intel VT-x

Intel PT

Host Kernel Hardware
46

#RSAC
Why Virtualize?

Crash Protection
Crashing the target guest won't crash the Fuzzer on the host

Closed Source
VT-x + Intel PT enbale efficient target agnostic fuzzing
47

Host  Guest
Host to Guest Send inputs Overwrite panic handler

Host

Guest to Host Request and get next payload Disclose CR3 value Disclose panic handler address

IPT Hypervisor Coverage Fuzzer

#RSAC
Guest
Kernel Harness
48

#RSAC
Setup Story
· Fuzzer executes from a VT-x and KVM enabled host (Latest Ubuntu in our case) · Fuzzing target is virtualized on the Guest (Latest Windows in our case) · Inputs are requested by the guest via a Hypercall API · Host passes the input via a shared memory buffer · Guest harness runs inputs vs kernel · Host collects Intel PT traces and they are converted to a coverage bitmap
49

#RSAC
Harness: Initialization
50

#RSAC
Harness: Fuzzing Loop
51

#RSAC
Demo
kAFL in action = Vulnerability
52

#RSAC
What's Next?

OTHER OSs

GRAMMAR
Fine tune drivers' specific grammar
requirements

HYPERVISORS
Attack surfaces with more privilege levels
fragmentation

53

#RSAC
Takeaways
What Developers can do:
· The first step in exploiting drivers is to access them · If you restrict that access then the attack surface is nullified · You can also fuzz your own drivers as a part of the QA process
What Attackers can do:
· Use our automation scripts · Start fuzzing the kernel · Examine KMDF and NDIS drivers for more bugs
54

#RSAC
Takeaways
What Defenders can do:
· Naïve: Make sure every driver is up-to-date · Advanced:
· Monitor DeviceIoControl requests to devices
· Block / Alert in case the requesting executable is unsigned
55

#RSAC
Credits
Google  Ilja van Sprundel James Forshaw kAFL Syzkaller Alex Ionescu HackSys Team
56

Thank You For Listening !
Do you have any questions? mark.cherp@gmail.com | @OcamRazr eranhelforc@gmail.com | @EranShimony

#RSAC
57


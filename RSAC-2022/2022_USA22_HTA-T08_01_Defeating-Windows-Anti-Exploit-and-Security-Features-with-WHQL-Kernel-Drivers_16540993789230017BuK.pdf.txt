#RSAC
Disclaimer
Presentations are intended for educational purposes only and do not replace independent professional judgment. Statements of fact and opinions expressed are those of the presenters individually and, unless expressly stated to the contrary, are not the opinion or position of RSA Conference LLC or any other cosponsors. RSA Conference does not endorse or approve, and assumes no responsibility for, the content, accuracy or completeness of the information presented. Attendees should note that sessions may be audio- or video-recorded and may be published in various media, including print, audio and video formats without further notice. The presentation template and any media capture are subject to copyright protection.
©2022 RSA Conference LLC or its affiliates. The RSA Conference logo and other trademarks are proprietary. All rights reserved.
1

#RSAC
SESSION ID: HTA-T08
Defeating Windows Anti-Exploit & Security Features with WHQL Kernel Drivers
Arush Agarampur
Student at Rutgers University | New Brunswick @axagarampur

#RSAC
About Me
Self-taught programmer Low-level code enthusiast
­ Operating systems ­ Reverse engineering ­ Security
Work with Windows
­ NT Kernel ­ OS technologies & internals ­ Windows Runtime ­ UI development
3

#RSAC
HTA-T08 -- Agenda

Learning goals

Background introduction

Discuss new exploit
countermeasures

Case study #1

Case study #2

Closing & questions

4

#RSAC
Learning goals
You will learn how:
· One may circumvent new OS anti-exploit features · "Trusted code" may not be so trustworthy · One can use security products to bypass OS security boundaries
(isolation, hypervisors, etc.)
You can apply this information to:
· Your organization's software dependencies · Your group's security research & operations · Decisions about trusting external security products
5

#RSAC
Background information
Quick rundown about Windows memory spaces, device drivers, and WHQL signing

#RSAC
Windows memory spaces
Userspace (everything you do is here)
­ Isolated by hardware (ring 3) ­ Communicates with kernelspace (ring
0) via system calls
Special CPU instructions to move program context into ring 0 from ring 3
Kernelspace contains OS core
­ Controls everything ­ Manages hardware, other programs,
private information, etc.
7

Device driver architecture
Driver ­ loadable code that performs privileged operations
­ Hardware control ­ Privileged software
Hypervisors, antivirus drivers, etc.
Accepts userspace "requests"
­ I/O Control ­ Perform driver-specific task(s) ­ Make hardware perform task(s)

Ring 0 (Kernel mode drivers)
Ring 1
Ring 2
Ring 3 (Userspace)

#RSAC
8

Common device driver functionality
Query privileged information
Interact with hardware components
Memory management
­ Read/Write system memory ­ Modify device-specific memory ­ Map physical RAM to system memory space
Accepts these "commands" from userspace
­ Easier to program in userspace ­ Driver does bare-minimum functionality

#RSAC
"Write 0x123 to physical address 0x987"
"OK, mapping physical address 0x987 to system memory and writing 0x123 to it"
Scanning physical address 0x987 for a value to tell me something
9

#RSAC
Device driver implementation

Use the OS kernel
­ Call specific functions
Setup fake "device object"
­ Communication with userspace via I/O control commands to this "device object"
­ Treated as a file

OS returns a HANDLE to represent the connection
"Open the file \\.\MyDevice"

"OK, I'm letting the driver know"

10

#RSAC
Device driver implementation

Memory management
­ Map physical addresses  system virtual addresses via system PTEs
­ Access physical memory directly
Section objects
Map physical memory section
Other functionality
­ Call kernel functions as normal

Virtual Address

Traverse page table tree

Physical address in RAM

11

#RSAC
Exploitable much?
Hundreds of exploits found
­ Based off direct memory access ­ Been going on for years: CVE-2021-41285,
CVE-2022-21814, CVE-2022-22516
Most driver vendors don't produce high quality, safe drivers Modify kernel memory to steal information, gain elevated privileges, etc. These drivers are signed
12

#RSAC
WHQL Signing
Different type of driver signing
­ "Tested from Microsoft" ­ "Robust reliability, quality, and
compatibility" ­ Gets a "Microsoft Windows" publisher name
Other benefits
­ Automatically installs ­ Widespread: downloadable from Windows
update
Do they deserve the name?
13

Anti-Exploit features
Hardened kernel routines
­ Can't map page tables (MmMapIoSpace) ­ Default memory pool is NoExecute
Kernel address space layout randomization (KASLR)
­ Address of kernel structures are selected at random
­ Change every boot cycle
Virtualization Based Security
­ Runs the OS under a specially designed hypervisor
­ Provides multiple services
Hypervisor enforced code integrity (HVCI) Kernel mode code integrity (KMCI) Isolated User Mode (IUM) And more

#RSAC
14

#RSAC
Case study #1
Goal: bypass kernel routine hardening and KASLR to execute unsigned kernel code stealthily VBS is turned OFF

#RSAC
Corsair LL Access -- first glance

Multiple memory APIs in use · I/O space mappings · MDL mappings
Simple device creation

WHQL Signed
Can we overwrite kernel memory using this driver?
­ Maybe
Good initial impression, more analysis needed
16

#RSAC
Corsair LL Access -- static analysis

Checks if process is at least
administrator upon opening
device 

Can access physical memory using a specific IOCTL: · Maps I/O space to
system space · Allocates MDL to
represent I/O mapping · Maps the MDL
into userspace

17

#RSAC
Designing an attack
Driver allows us to map physical RAM into our userspace program
­ Attack based off this core functionality

Overwrite kernel code

· Get kernel code PA
· Map PA into our process

Call kernel code

Trigger shellcode execution

Load

Call kernel

unsigned functions to

code load module

Cleanup

Restore everything back to how
it was

18

#RSAC
Immediate problems
Working with PA
­ We have kernel memory VA ­ Convert into PA ­ MmGetPhysicalAddress is in kernelspace 
Ideas to get kernel memory PA
­ Brute force scan from start/random areas of RAM
Slow, inefficient, and causes BSODs
­ Use known PML4/kernel data structures PA
KASLR exists
­ Scan for self-referencing PML4 entry and convert VA to PA manually
Hardened MmMapIoSpace will not map page tables
19

#RSAC
AMD64 paging abuse
Narrow down possible PA that have desired kernel code
­ Use VA information of desired kernel function
­ Function I chose to use: NtVdmControl
System call implementation Is not used ­ simply returns STATUS_NOT_IMPLIMENTED Plenty of space for shellcode
­ Use relative virtual address (RVA) of function to narrow down PA
20

#RSAC
AMD64 paging abuse -- cont.
Scan every physical page frame with offset 0xA70 for NtVdmControl bytes
Every physical page frame with offset 0xA70 is guaranteed to have the same data as
VA
21

#RSAC
AMD64 paging abuse -- cont.
Probe individual machine words
­ Faster than creating MDLs and userspace mappings
­ Immediate result returned
Corsair driver provides this functionality via another IOCTL 
22

AMD64 paging abuse -- cont.
Search for "hot" signature
­ Prevents landing on other kernel image mappings
Skip reserved RAM regions
­ Increases speed ­ No BSOD ­ Only searching RAM used by OS
Query memory ranges via undocumented OS system call
­ NtQuerySystemInformation with SystemMemoryTopologyInformation

RAM

#RSAC
0 ­ 0x1000 [Free]
0x7BBFF000 ­ 0x7BC00000 [Reserved]
0x100000000 ­ 0x26AC00000 [Free]
23

Shellcode design
Once NtVdmControl PA is found, it can be mapped, and shellcode can be written
­ Write & execute "allocator" shellcode ­ Allocator allocates executable memory from
nonpaged pool to hold real shellcode
Shellcode is just a function in attack program
­ Uses a table of pointers to call kernel functions ­ "Copy function" from attack process to kernel
memory ­ Eliminates need for ASM
Syscall is "hijacked"
­ It is now "our system call," we can pass anything we want into it, including userspace pointers

#RSAC
Allocated shellcode
pool
24

#RSAC
Shellcode design -- loading unsigned code

Load unsigned code in form of driver
­ MmLoadSystemImage is the best way to properly load a module
­ Function will fail because image is unsigned
Bypassing image signature enforcement
­ Overwrite internal kernel function that checks image signing
Modify MiValidateSectionSigningPolicy Always return success
­ Use MDLs to modify the physical memory backing the kernel function

Restore changes & clean up

Modify code signing
verification system

Load unsigned kernel module

25

#RSAC
Shellcode design -- final steps
All drivers have a driver object
­ Create one manually due to nonstandard driver loading
Shellcode calls IoCreateDriver
­ Private (but exported) kernel function ­ Function also calls driver's entry point
After this step, shellcode is finished
­ Cleanup MDL mappings and return ­ Write jump to ExFreePoolWithTag to
free allocated shellcode memory
26

#RSAC
Another vulnerable driver?
Are there more drivers like this on my system?
­ Found the EVGA X1 driver
EVGA driver analysis
­ Like Corsair LL Access ­ Lacks userspace memory mappings
(probably for the better) ­ We can still probe/write individual
bytes to I/O space
Modified exploit to work with EVGA X1 driver
27

#RSAC
Case study #2
Goal: read isolated memory from an IUM process using only built-in Windows components VBS is turned ON

Choosing a component to abuse
Requirements
­ Low-level memory manipulation ­ Accepts parameters from userspace ­ No hardened API usage
Where to look
­ System protection/guard runtime
Uses PPL process protection
­ KMDF drivers
Non-user processing
­ Antivirus/Windows Defender
Maybe

#RSAC
Checks for WinTCB signing upon device
HANDLE creation
30

#RSAC
Windows Defender
Several kernelspace components
­ Main kernel driver WdFilter.sys ­ Boot-time, device filter, and network
inspection drivers
Interesting behavior
­ Randomly creates kernel driver service MpKslXxx.sys
Usually during new driver load or definition updates
­ Service deleted randomly after some time ­ Can we use this?
31

#RSAC
Digging into KSLD

Extracted alongside definition update files
­ Extracted from mpengine.dll
Also contains antivirus process binary (MsMpEng(CP).exe)
Driver is a KMDF (WDF) driver
­ Harder to analyze ­ Most handling performed by WDF ­ mpengine.dll has an equivalent
WDM version available 
Called KSL instead of KSLD

KSLD not visible
because it has been deleted

32

#RSAC
Analyzing KSL

Startup behavior
­ Retrieves pointers to MmCopyMemory based on OS version
Retrieves other function pointers
­ Retrieves registry parameters
Allowed process name, version, etc.
­ Securely creates device object
Upon device open, get process name
­ If name != registry allowed name value, return STATUS_ACCESS_DENIED

Return either success or
access denied

Retrieve function pointers

Query trusted process name

Compare caller process
name to trusted process name

Handle device opened request
33

#RSAC
Analyzing KSL -- cont.
PLENTY of IOCTL functionality
­ Read/Write physical memory MmMapIoSpace ­ Read physical memory ZwMapViewOfSection
Possible to map as Read+Write Not a hardened routine!
­ Read virtual & physical memory MmCopyMemory
Can probe arbitrary virtual & physical addresses Read lots of memory at once Only available on versions >= 8.1
­ Retrieve address of kernel functions MmGetSystemRoutineAddress ­ Open file HANDLES with kernelspace-level permissions IoCreateFile ­ Read specific CPU registers including system registers ­ And more
34

Designing an exploit
Execute custom unsigned code
­ VBS is on which causes problems
Read isolated memory from an IUM process
­ Maybe ­ Need to develop a method
IUM memory isolation
­ Hypervisor prevents reads ­ Not even kernel debugger can read
memory ­ Only IUM process with selected
PML4 base can read

VTL 0 (Standard partition)

#RSAC

VTL 1 (Isolated partition)

Physical Address 0x1D00000 EPT violation
PTE

Physical Address 0x1D00000
PTE

PDE

PDE

PDPE PDPE

PML4 PML4

35

Designing an exploit -- cont.
Use IUM process PML4
­ Stored in kernel KPROCESS object ­ Use NtQuerySystemInformation with
SystemHandleInformation to get VA of object
Parse EPROCESS in kernelspace using KSLD
­ Win 8.1 & Greater: use MmCopyMemory with VA
­ Otherwise, read current CPU's CR3 register
CPU's CR3 equals the current process's PML4 base address Kernel is mapped into every process' page tables Use ZwMapViewOfSection to convert VA to PA and extract information

#RSAC
36

Reading IUM memory

0x3fc9e000

0xAB283000 0xC823D000

0x13E2000 0xA1F83000 0x283FE000

Use IUM process PML4 to walk page tables
MmCopyMemory with PA or
ZwMapViewOfSection to read physical memory

Use VirtualQuery to enumerate
private | commit memory regions and dump them using this read
method

Lock the pages in memory with
NtLockVirtualMemory to ensure the PTEs are
valid

#RSAC

37

#RSAC
Reading IUM memory -- cont.
PEB/TEB (has 0xFFs followed by image base
address) Other IUM
data
38

KSLD exploit effectiveness
High availability
­ Windows 10+ has Windows Defender included
­ MpKslXxx most likely already installed or running
If not, extract from latest definition update mpengine.dll Otherwise, use existing driver with exploit
Discrete memory access
­ Hypervisor's EPT does not prevent reads ­ "Windows Defender" is reading
memory/installing driver
Already commonly does this
­ Nothing recorded in secure kernel's security log

#RSAC
Hypervisor from Windows 10 1607 (Anniversary Update)
39

#RSAC

#RSAC
Takeaways & next steps
Treat signed artifacts as foreign
­ Even "trusted, quality signed code" ­ Static analysis and runtime behavior verification is a must if external code should be used in an enterprise
Host systems need proper auditing
­ Built-in components can be abused Even parts of Antivirus (as you saw)
­ If security is critical, all high-privilege components must undergo the same static analysis and runtime behavior verification that all external components go through
Zero external dependencies is the best goal
­ Along with host system auditing
Over the next several months, organizations should audit their high-security software dependencies
­ External dependencies and parts of the host system
Over the next year, organizations can slowly move towards alternate solutions to ensure security across all privilege/integrity levels
41

#RSAC
Thank you for your time
It's time for any questions!
GitHub/Twitter -- @AzAgarampur/@axagarampur


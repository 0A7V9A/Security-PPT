Commix:
Detecting & Exploiting Command Injection Flaws.
Anastasios Stasinopoulos {stasinopoulos@unipi.gr} Christoforos Ntantogian {dadoyan@unipi.gr} Christos Xenakis {xenakis@unipi.gr}

Whoami?
Anastasios Stasinopoulos (@ancst)  Ph.D candidate at University of Piraeus  Department of Digital Systems.  Member of the Systems Security Laboratory (@ssl_unipi)  Builder & Breaker.

Introduction.

Introduction.
 According to the OWASP, "command injection is an attack in which the goal, is the execution of arbitrary commands on the host operating system through a vulnerable application."  ...is also referred as "shell injection", "shell command injection", "OS injection", "OS command injection" etc.
 This attack is possible when an application passes unsafe user supplied data (i.e forms, cookies, HTTP headers etc) to a system shell.
 The attacker-supplied OS commands are usually executed with the same privileges of the vulnerable application.

Are command injections still alive?

Where may command injections exist?
1. Web Applications (i.e IBM, Sophos, Symantec, LanDesk, Cacti, SquirrelMail, ....) 2. ADSL SOHO routers (i.e D-Link, TP-Link, Linksys, ....) 3. IP Cameras (i.e TP-Link, D-Link, Vivotek, Zero-IP, ...) 4. Network Printers (i.e Xerox, ...) 5. IP PBX Applications (i.e Asterisk PBX, FreePBX, ...) 6. Raspberry PI based Web Applications 7. Arduino based Web Applications

Why are command injections still alive?
 Command injection attacks are OS-independent ...  can occur in Windows, Linux, Unix etc.
 ... as well as programming language-independent  may occur in applications written in various programming languages  C, C++, C#, JAVA, PHP, Perl, Python, Ruby etc.  ... or web-based applications written in Web Application Frameworks  ASP.NET, CGI, Python Django, Ruby on Rails etc.

What causes command injection flaws?

What causes command injection flaws?
The main reason that an application is vulnerable to command injection attacks, is due to incorrect or complete lack of input data validation.

...?addr = 127.0.0.1 ; ls

GET parameter

Payload Separator

Analysis of command injection attacks.

Analysis of command injection attacks.
1. Results-based command injections.
 The vulnerable application outputs the results of the injected command.
 The attacker can directly infer if the command injection succeeded or not.  Injection results are visible.
2. Blind command injections.
 The vulnerable application does not output the results of the injected command.
 Even if the attacker injects an arbitrary command, the results will not be shown in the screen.  Injection results are not visible.

Results-based command injections.

Example #1 : "normal.php".

Example #1 : "normal.php" exploitation.

Blind command injections.

Example #2 : "blind.php".

Example #2 : "blind.php" exploitation.

Time-based technique.
Is based on time delays  The attacker can presume the result of the injected command. 1. Decides if the application is vulnerable to time-based blind command injection or not. 2. Determines the length of the output of the injected command.
3. Exports char-by-char the output of the injected command, using a chain of OS commands (i.e "cut", "head", "od" and "tr").

File-based technique.
Basic Idea : If we are not able to see the results of the execution of an
injected command....  ...we can write them to a file, which is accessible by us!
What If, web server's root directory is not writable/accessible?
 We can use the temp directories, ( "/tmp/" or "/var/tmp/") to store a file with the output of the injected command!  Limitation: Usually, we cannot read files located in these temp directories through the web application.  To bypass this limitation, apply the time-based technique to read the contents of the text file!  ...is also referred as "tempfile-based technique".

Commix tool.

General information.
 Commix (a short for command injection exploiter) is a software tool aiming at facilitating web developers, penetration testers and security researchers to test web applications with the view to find bugs, errors or vulnerabilities related to command injection attacks.
 https://github.com/stasinopoulos/commix  Follow @commixproject.
 Written in Python programming language.  Python version 2.6.x or 2.7.x is required.
 Cross-platform application  Linux  Mac OS X  Windows (experimental)
 Free Open Source Software.

Installation.
Download commix by cloning the Git repository:
Commix comes packaged on the official repositories of the following Linux distributions. Use the package manager to install it!
 ArchAssault  BlackArch Commix also comes as a plugin, on the following penetration testing frameworks:  The Penetration Testers Framework (PTF)  PentestBox  Weakerthan  CTF-Tools

Supported exploitation techniques.

Supported exploitation techniques.
1. Results-based command injections
 1.1. The classic results-based technique.  Based on the execution results output.
 1.2. The dynamic code evaluation technique.  Based on the eval()'s execution results output.  Also supports:  preg_replace() injections via "/e" modifier.  usort() injections.  assert() injections.  str_replace() injections.  preg_match() injections.

Supported exploitation techniques.
2. Blind command injections
 2.1. The time-based technique (Blind)  Based on time delays  Output is inferred char-by-char.
 2.2. The file-based technique (Semiblind)  Based on the execution results output, in a random name text file in "/var/www/", "/var/www/html/"etc.
 2.2.1 The tempfile-based technique (Semiblind)  Based on time delays  Output is inferred char-by-char from a random named text file in "/tmp/" or "/var/tmp/" directory.

Overview of the architecture.

Architecture overview.

Input

Modules

Separators

Classic

Eval-based Time-based File-based

ATTACK VECTOR GENERATOR NO
Vulnerable?

VULNERABILITY DETECTION

YES

EXPLOITATION COMMIX

Exploitation

NO

Procedure?

YES

Divided into three main modules:
ATTACK VECTOR GENERATOR
Generates a set of command injection attack vectors, using the serparators list (i.e ;,&,|,%0a etc).
VULNERABILITY DETECTION
Performs the command injections to the target, using the generated set of attack vectors.
EXPLOITATION
Attempts exploitation procedure, If it determines that the application is vulnerable.
Output

Reducing false positives.

Reducing false positives.
1. Regarding results-based command injections.
 Prints three times a randomly generated string, combined with the result of a mathematic calculation of two randomly selected numbers.
 Must take as response  union of the strings combined with the result of the mathematic calculation (i.e KVCGCQ52KVCGCQKVCGCQ)
2. Regarding blind command injections.
 Problem: High probability of false-positive results, due to random or accidental response delays of the target host.  Calculates the average response time of the target host.  The average response time, is added to the default delay time which is used to perform time-based attacks.

Functionality.

HTTP headers.
 Commix allows us to provide our own HTTP Referer header, HTTP User-Agent header, Cookies values, as well as extra custom HTTP headers.
 It also supports, command injections via all these HTTP Headers on every described technique!

Enumeration options.
The enumeration options, can be used to enumerate the target host.  Retrieve current user name.  Retrieve current hostname.  Check if the current user has root privileges.  Retrieve system information.
 Operating system and hardware platform.  Retrieve system users list.  Retrieve system users privileges.  Retrieve system users password hashes.
 Limitation: The "/etc/shadow" file must be readable by current user.

Alternative os-shell.
 Bypasses target host's bash limitation.  ...restrctions of bash commands i.e "cat", "echo", etc.
 At this moment only python alternative is fully supported on every injection technique.  Future plan support  PHP/Perl/Ruby alternative os-shells Hint: Pwn @VulnHub's "Persistense" vm via this os-shell.

We <3 shellz!
1. Netcat (nc) reverse shells  Reverse shells to netcat.
2. Netcat-without-netcat reverse shells  Reverse shells to netcat... without using netcat.
Hint: Check "usage examples" wiki page  several test cases / attack scenarios.
3. Write/Upload a web-shell on target host via file access options.  Metasploit PHP meterpreter web shell.  Weevely PHP web shell.  ...suggest yours!  Fork & commit. Hint: Check "upload shells" wiki page.

We <3 shellz!

Meterpreter PHP Reverse Shell

Netcat Reverse Shell

Modules
1. The ICMP exfiltration module.
 This module is designed to provide a server-side component to receive and store files, exfiltrated over ICMP echo request packets.
 Hint: Pwn @VulnHub's "Persistense" vm via this module.
2. The 'Shellshock' module.
 This module is designed to affect a bash vulnerability which allows an attacker to remotely execute shell commands by attaching malicious code in environment variables used by the operating system.
Hint: Pwn @Pentesterlab's "CVE-2014-6271/Shellshock" vm via this
module.
3. Develop and easily import your own modules.  Increase the capabilities of commix and/or adapt it to our needs.
Hint: Check "Module Development" wiki page.

Evaluation.

Command injection testbeds.
1. Damn Vulnerable Web App 2. Xtreme Vulnerable Web Application 3. OWASP: Mutillidae 4. bWAPP: bee-box (v1.6) 5. Persistence 6. Pentester Lab: Web For Pentester 7. Pentester Lab: CVE-2014-6271/Shellshock 8. Pentester Academy: Command Injection ISO: 1 9. Pentester Lab: Rack Cookies and Commands injection 10. SpiderLabs: MCIR (ShelLOL) 11. Kioptrix: Level 1.1 (#2) 12. Kioptrix: 2014 (#5) 13. Acid Server: 1 14. Flick: 2 15. w3af-moth 16. commix-testbed

0-day disclosure.

0-day #1 disclosure
WP-Plugin-Grunt - https://github.com/michaelbontyes/wp-plugin-grunt
"A Wordpress plugin to manage your project using Grunt."
 Vulnerable file  https://github.com/michaelbontyes/wp-plugin-grunt/blob/master/wp-plugin-grunt.php

0-day #2 disclosure
Sabai Technology - http://www.sabaitechnology.com/
"Sabai's goal is to make VPN routers and other VPN network technology extremely easy to use and accessible to the average home or business at an affordable price."
 OpenVPN-AS (v1) : A Sabai version of Open-VPN Access Server.
 Vulnerable file  https://github.com/sabaitechnology/openvpnas/blob/master/bin/shell.php
 VPNA (v1) : Configuration tools for a VPN accelerator.
 Vulnerable file  https://github.com/sabaitechnology/vpna/blob/master/www/bin/shell.php

Bugs and enhancements
Except for pull requests, forks, or stars non-developers can open an issue @github.
Things i'd really appreciate:  Bug reports  Preferably with error logs!  Enhancements  Suggestions on how i can improve commix for you !?  Descriptions of how you use it !?

Any questions?
@ancst https://github.com/stasinopoulos stasinopoulos@unipi.gr | GPG : 0x2D40CEBF804F5133 https://stasinopoulos.github.io/


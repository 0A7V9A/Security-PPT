SESSION ID: CRWD-T08
Evasive Malware Exposed and Deconstructed

Christopher Kruegel
Chief Scientist Lastline, Inc.

#RSAC

#RSAC
Who am I?
 Co-founder and Chief Scientist at Lastline, Inc.
 Lastline offers protection against zero-day threats and advanced malware
 effort to commercialize our research
 Professor in Computer Science at UC Santa Barbara (on leave)
 many systems security papers in academic conferences  started malware research in about 2004  built and released practical systems (Anubis, Wepawet, ...)
2

#RSAC
What are we talking about?
 What is evasion and why should I care?  Evasion as a significant threat to automated malware analysis
 detect analysis environment  avoid being seen by automated analysis
 Improvements to analysis systems
 automate defenses against classes of evasion approaches
3

#RSAC
Evasive Malware
4

#RSAC
Evasive Malware
 Attackers have always tried to escape or avoid detection  as we build new defenses, attackers try to bypass them  result is the arms race in computer security
 Evasion has been used by malware authors for decades  initially, evasion was targeting anti-virus (AV) solutions  AV systems relied heavily on signatures and static analysis
5

#RSAC
Evading Static Analysis
 Make (relevant) code unavailable
 packing / encrypting  delay inclusion of code (run-time code loading or generation)
 Exploit differences in the parsing capabilities
 parsing of executable (the target is the OS)  parsing of document (the target is, for example, Office application)
 Make operations dependent on values known only at run-time
 table lookups based on user-provided input
6

Evading Static Analysis
7

#RSAC
64% of AV scanners fail to identify "1% hardest to detect" malware after 1 yr.

#RSAC
Evading Static Analysis
8

#RSAC
Dynamic Malware Analysis
9

#RSAC
Dynamic Malware Analysis
 Also known as malware analysis sandbox
 Implemented as instrumented execution environment  run program and observe its activity  make determination whether code is malicious or not
 Sandboxes are great!  can handle zero day threats (signature-less defense)  automate tasks done by human analysts and reverse engineers
10

#RSAC
Dynamic Malware Analysis
 Recently emerged as a new silver bullet in security
11

Dynamic Malware Analysis
Protected company
APT
Internet
12

#RSAC Network appliance

Dynamic Malware Analysis
Protected company
APT
Internet
13

#RSAC Network appliance

Dynamic Malware Analysis
Protected company
APT
Internet
14

#RSAC Network appliance

Dynamic Malware Analysis
Protected company
APT
Internet
15

#RSAC Network appliance

#RSAC
Not All Sandboxes Are Equal
"It is easy to build a sandbox, it is hard to build an effective sandbox!"
Lawrence Orans "The Executive's Guide to Cyberthreats" (Gartner Symposium, October 2013)
16

Sandbox Designs

Windows API

Windows API

Native System Call Interface

17

#RSAC
User mode
Kernel mode
Software Hardware

Sandbox Designs

Windows API

Windows API

Native System Call Interface

18

#RSAC
Hook API functions - monitor interactions
with OS - easy to implement - needs process
modifications - no kernel visibility

Sandbox Designs

Windows API

Windows API

Native System Call Interface

19

#RSAC
Hook system calls - monitor interactions
with OS - easy to implement - minimal kernel
visibility

Sandbox Designs

Windows API

Windows API

Native System Call Interface

20

#RSAC
Full system emulation - monitor interactions
with OS and all instructions - full kernel visibility - implementation is more difficult

#RSAC
VM Approach versus CPU Emulation
21

Visibility Does Matter
 See more types of behavior
 which connection is used to leak sensitive data
 allows automated detection of C&C channels
 how does the malware process inputs from C&C channels
 enumeration of C&C commands (and malware functionality)
 insights into keyloggers (often passive in sandbox)  take memory snapshots after decryption for forensic analysis
 Combat evasion
 see everything and adapt to attacker's threats  detect triggers  bypass stalling code
22

#RSAC

#RSAC
Evading Sandboxes

#RSAC
Evading Dynamic Analysis
 Malware authors don't sleep
 they got the news that sandboxes are all the rage now  since the code is executed, malware authors have options
 Evasion
 develop code that exhibits no malicious behavior in sandbox, but that infects the intended target
 can be achieved in various ways
24

#RSAC
Evasion Going Mainstream
25

#RSAC
Evasion Going Mainstream
2X growth last year
26

#RSAC
Evasion Going Mainstream
2X growth last year
+ many more behaviors per sample
27

Evading Dynamic Analysis
 Malware can detect runtime or analysis environment
 differences between virtualized and bare metal environment  checks based on system (CPU) features  checks based on operating system artifacts (files, processes, ...)
 Malware can exploit limited context
 Malware can avoid being analyzed
 tricks in making code run that analysis system does not see  wait until someone does something  time out analysis before any interesting behaviors are revealed  simple sleeps, but more sophisticated implementations possible  move code into kernel space (rootkits)

#RSAC
Environmental Awareness
Timing-based Evasion

28

#RSAC
Detect Analysis Environment
 Check Windows Product ID
HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductID
 Check for specific user name, process names, hard disk names
HKLM\SYSTEM\CURRENTCONTROLSET\SERVICES\DISK\ENUM
 Check for unexpected loaded DLLs or Mutex names  Check for color of background pixel  Check of presence of 3-button mouse, keyboard layout, ...  WMI queries
29

#RSAC
Detect Analysis Environment
30

#RSAC
Detect Analysis Environment
31

#RSAC
Detect Analysis Environment
 Current usage of both physical and virtual memory
 GlobalMemoryStatus
 CPU properties
 NtOpenKey (Hardware\Description\System\CentralProcessor\0)
 Check for hard drive properties
 DeviceIoControl (IOCTL_STORAGE_QUERY_PROPERTY)  DeviceIoControl (IIOCTL_DISK_GET_LENGTH_INFO
 Device name
 SetupDiGetDeviceRegistryProperty (SPDRP_FRIENDLYNAME)
 Check for number of processors
 GetSystemInfo
32

#RSAC
Detect Analysis Environment
33

#RSAC
Exploit Limited Context
 In certain cases, malware is targeted for specific organization
 malware doesn't need to detect analysis environment  instead, only run on very specific, intended target
 This idea has become more popular in APT attacks
 attacker can leverage much of previously discussed techniques  additional information could come from local network environment
34

#RSAC
Avoid Monitoring
 Open window and wait for user to click
 or, as discovered by our competitor, click multiple times ;-)
 Only do bad things after system reboots
 system could catch the fact that malware tried to make itself persistent
 Bypass in-process hooks (e.g., of library functions)
35

#RSAC
Avoid Monitoring
Bypass in-process hooks (e.g., of library functions)
jump to second instruction of library function
36

#RSAC
Avoid Monitoring
 Sleep for a while (analysis systems have time-outs)
 typically, a few minutes will do
 Anti-sleep-acceleration
 some sandboxes skip long sleeps, but malware authors have figured that out ...
 "Sleep" in a smarter way (stalling code)
37

#RSAC
The Simple Sleep Attack
push 20000000h call Sleep
Sleep(x) - sleeps x milliseconds
38

#RSAC
Sandbox Controls Time APIs
 Sleep (NtDelayExecution)  SetTimer (NtSetTimer)  NtWaitforSingleObject (NtWaitFor*)  WaitForMultipleObjects (NtWaitFor*)
39

#RSAC
Avoid Monitoring
Anti-sleep-acceleration
 introduce a race condition that involves sleeping
 Sample creates two threads
1. sleep() + NtTerminateProcess() 2. decrypts and runs payload
 Another variation
1. sleep() + DeleteFileW(<name>.bat) 2. start <name>.bat file
40

Timing Attack: Race Condition

push edi ;hTemplateFile push edi ;dwFlagsAndAttributes push 3 ;dwCreattionDesposition push edi ;lpSecurityAttributes push 1 ;dwShareMode push 80000000h ;dwDesiredAccess push ebx ;lpFileName call CreateFileA cmp eax, 0FFFFFFFFh jz fail lea eax, [ebp + NumberOfBytesRead] push edi lpOverlapped push ecx ; plNuberOfBytesRead push esi ; nNumberOfBytesToRead push [ebp + DecryptExecutePayload] push eax call ReadFile cmp [ebp + NumberOfBytesRead], edi jbe fail ; Decrypts and execute an encypted code, : which creates a new thread for a payload function call [ebp + DecryptExecutePayload] push 0x493e0 call Sleep fail: push edi call ExitProcess

Thread 1
CreateFile ReadFile CreateThread Sleep (5000 * 60)
ExitProcess

Thread 2
DecryptExecutePayload

41

#RSAC

#RSAC
Avoid Monitoring
Anti-sleep-acceleration
 explicitly check for time that has passed  sometimes using and comparing multiple time sources
42

Timing Attack: Sleep and TSC

rdtsc

mov

[ebp+RDTSC1_EAX], eax

mov [ebp+RDTSC1_EDX], edx

push 20000h

call Sleep

rdtsc

sub edx, [ebp+RDTSC1_EDX]

cmp edx, 0

jg short return_success

sub eax, [ebp+RDTSC1_EAX]

cmp eax, 20000h

jge short return success

mov eax, 1

retn

return success:

mov eax, 0

retn

int detect_time_manipulation() {
rdtsc_value1 = get_rdtsc_value(); Sleep (0x20000); rdtsc_value2 = get_rdtsc_value();
if (rdtsc_value2 - rdtsc_value1 >= 0x20000) return 0;
return 1; }
43

#RSAC

Timing Attack: Sleep, TSC and Ticks

rdtsc mov [esp+RDTSC1_EAX], eax mov [esp+RDTSC1_EDX], edx call GetTickCount mov ebx, eax ; EBX contains Tick Counter 1 push 10000 call Sleep rdtsc ; Calculate RDTSC difference sub eax, [esp+RDTSC1_EAX] sbb edx, [esp+RDTSC1_EDX] mov [esp+RDTSC_DIFF_EAX], eax mov [esp+RDTSC_DIFF_EDX], edx call GetTickCount ; Calculate GetTickCount difference mov ecx, eax sub ecx, ebx cmp [esp+RDTSC_DIFF_EDX], 0 jnz short fail cmp [esp+RDTSC_DIFF_EAX], 50000000 jb short return1_fail jmp short return_0_sucess jb short return1_fail jmp short return_0_sucess fail: jl short return1_fail

int detect_time_manipulation() {
rdtsc_value1 = get_rdtsc_value(); tick_cout1 = GetTickCount(); Sleep(10000); rdtsc_value2 = get_rdtsc_value(); tick_cout2 = GetTickCount();
if (rdtsc_value2 - rdtsc_value1 < 50000000) return 1;
if (tick_cout2 - tick_cout1 < 50) return 1;
return 0; }
44

#RSAC

#RSAC
Timing Attack: Stalling Loops
45

Example: Carbanak
 Used to infiltrate banks and takeover ATMs
 $1B raked in

#RSAC
 Stealth Behaviors  Hide .exe files  Unpacking behavior  Code injection to hide network activity
 Evasion Behaviors  Altered memory image of process  Virtual sandbox detection  Sleep calls  Forbid Debugging
46

Evading Sandboxes with

#RSAC

Kernel Malware

47

#RSAC
Kernel Malware
 Problematic for many sandboxes
 operates underneath the monitored interface  behaviors do not show up as system calls
 Critical component used in sophisticated APT attacks  Equation, Regin, Dark Hotel, Turla/Uroburos
48

#RSAC
Kernel Malware
 Three many steps
1. inject malicious code into kernel 2. make kernel execute malicious code 3. implement malicious functionality
49

#RSAC
Kernel Malware

Dropper/Exploit

Windows API

Windows API

Windows API

Native System Call Interface

50

#RSAC
Kernel Malware

Windows API

Windows API

Native System Call Interface
Rootkit / Driver

Windows API

51

#RSAC
Kernel Malware

Injected Code Windows API

Windows API

Native System Call Interface

Windows API

52

#RSAC
Kernel Malware
 Inject code into kernel
 load a driver into the kernel  problem: newer versions of Windows only load signed drivers  solution: steal certificate and sign your own driver  solution: reboot OS into mode where driver checks are disabled  solution: load vulnerable driver and exploit it
53

#RSAC
Kernel Malware
 Make kernel execute new code
 redirect (change) code pointer to point to malicious code  system call and interrupt tables are classic targets
 problem: Windows PatchGuard monitors integrity of system-critical data structures such as SSDT, IDT
 solution: tamper with PatchGuard and disable its functionality  solution: redirect code pointers that PatchGuard doesn't monitor
54

#RSAC
Kernel Malware
 Implement malicious functionality
 you are in the kernel, you can do anything you want  problem: kernel programming is not trivial, and mistakes crash the
system  solution: inject malicious code into legitimate apps or libraries
 this can be done by changing directly their memory  alternatively, one can simply change code in libraries or on disk
55

#RSAC
Example: Turla
 Load and exploit vulnerable VirtualBox driver  Disable check for signed driver loading (g_CiEnabled)  Load whatever you want
56

#RSAC
Example: Turla
 Tamper with data structures that PatchGuard monitors  Then, deal with the consequences (blue screen of death)
 PatchGuard invokes KeBugCheckEx
 hook KeBugCheckEx function and simply return
 Updated PatchGuard includes its own copy of KeBugCheckEx
 hook RtlCaptureContext and simply return
57

#RSAC
Example: Turla
 Traditional rootkit behavior
 redirect interesting system calls into single interrupt handler  dispatch and make desired changes to system call functionality
58

#RSAC
Example: Turla
59

#RSAC
Addressing Evasion
60

#RSAC
What can we do about evasion?
 Visibility is key
 when the sandbox can see more things, it can react to more threats
61

Visibility Matters

Type
Traditional Rootkit Traditional Rootkit Traditional Rootkit Traditional Rootkit Traditional Rootkit Traditional Rootkit APT APT APT APT

Family
XCP Zhelatin Srizbi Blakken Agent TDSS Dark Hotel Mask Turla Turla

Driver
32-bit 32-bit 32-bit 32-bit 32-bit 32-bit 32-bit 32-bit 32-bit 64-bit

62

Detected Detected Detected Detected Detected Detected Detected Detected Detected Detected

Traditional Sandbox
Failed Failed Failed Failed Failed Failed Failed Failed Failed Failed

#RSAC

#RSAC
What can we do about evasion?
 One key evasive technique relies on checking for specific values in the environment (triggers)
 we can randomize these values, if we know about them  we can detect (and bypass) triggers automatically
 Another key technique relies on timing out the sandbox
 we can automatically profile code execution and recognize stalling
63

#RSAC
Bypassing Triggers
 Idea
 explore multiple execution paths of executable under test  exploration is driven by monitoring how program uses certain inputs  system should also provide information under which circumstances action is triggered
 Approach
 track "interesting" input when it is read by the program  whenever a control flow decision is encountered that uses such input, two possible
paths can be followed  save snapshot of current process and continue along first branch  later, revert back to stored snapshot and explore alternative branch
64

#RSAC
Bypassing Triggers
 Tracking input
 we already know how to do this (tainting)
 Snapshots
 we know how to find control flow decision points (branches)  snapshots are generated by saving the content of the process' virtual address space  restoring works by overwriting current address space with stored image
 Explore alternative branch
 restore process memory image  set the tainted operand (register or memory) to a value that reverts branch condition  let the process continue to run
65

#RSAC
What can we do about evasion?
 Sometimes, it is difficult to get to interesting behaviors
 however, evasion is a strong signal for malicious intent  when you can see evasion, you can use this against malware
66

#RSAC
Wrapping Up

#RSAC
Apply
 Dynamic analysis is a powerful tool
 consider integrating sandbox capabilities into your defenses
 Dynamic analysis capabilities vary significantly
 understand limitations and evasive threat  ask your vendor questions about their sandbox, dig deeper
 what file types can the sandbox analyze? what activities can it see?  how does it handle evasion? how does it deal with malicious kernel code?
 Think about what you want to get out of a sandbox
 detection (black/white) and/or support for forensics (detailed behaviors)?
68

#RSAC
Conclusions
 Visibility and fidelity are two critical factors when building successful dynamic analysis systems
 full system emulation is a great point in the design spectrum
 Automated analysis of malicious code faces number of challenges
 evasion is one critical challenge
 Many evasion tricks are possible
 detecting environment  timing-based attacks  avoid analysis system by moving into the kernel
69

#RSAC
THANK YOU!
 For more information visit www.lastline.com or contact us at info@lastline.com.
70


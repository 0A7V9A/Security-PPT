0-Days & Mitigations: Roadways to Exploit and Secure Connected BMW Cars

About us

· Researchers from Tencent Keen Security Lab
· Focus on the security research of connected cars · 2016 & 2017 Tesla Research · 2018 BMW Research

Timeline and Milestones

02/2017 ­ 02/2018
Research project by Tencent Keen Security Lab
2017
Pure Black Box Huge Reverse Engineering

03 ­ 08/2018

Disclosure of report to BMW Group
2/26/2018

Completion of rollout of all backend and vehicle measures
08/2018

Agenda

· Vehicle Components and Exploit Chains · Root the Head Unit · Exploit the Telematic Communication Box · Attack ECUs behind the Gateway · Incident Response and Countermeasures

Vehicle Components of BMW Cars

· Head Unit (In-Vehicle Infotainment)

3G / GSM / SMS

· a.k.a. IVI · Multimedia

K-CAN4 K-CAN4

Telematic Communication Box
(TCB)
USB

OBD-II

Central Gateway

NBT Head Unit (In-Vehicle Infotainment)

Backend Server
USB Bluetooth

Ethernet

Body-CAN PT-CAN Chassis-CAN

In-Car Components

Vehicle Components of BMW Cars

· Telematic Communication Box

· a.k.a. T-Box

· eSIM

K-CAN4

· Telematics · Online Service

K-CAN4

OBD-II

Central Gateway

3G / GSM / SMS
Telematic Communication Box
(TCB)
USB
NBT Head Unit (In-Vehicle Infotainment)

Backend Server
USB Bluetooth

Ethernet

Body-CAN PT-CAN Chassis-CAN

In-Car Components

Vehicle Components of BMW Cars

· Central Gateway
· OBD Diagnosis · CAN buses · Ethernet

K-CAN4 K-CAN4

OBD-II

Central Gateway

3G / GSM / SMS
Telematic Communication Box
(TCB)
USB
NBT Head Unit (In-Vehicle Infotainment)

Backend Server
USB Bluetooth

Ethernet

Body-CAN PT-CAN Chassis-CAN

In-Car Components

Vehicle Components of BMW Cars

· External attack surfaces

· 3G/GSM/SMS

· OBD-II

K-CAN4

· USB · Bluetooth

K-CAN4

OBD-II

Central Gateway

3G / GSM / SMS
Telematic Communication Box
(TCB)
USB
NBT Head Unit (In-Vehicle Infotainment)

Backend Server
USB Bluetooth

Ethernet

Body-CAN PT-CAN Chassis-CAN

In-Car Components

ECUs behind the Gateway

· CAN buses connected to various ECUs
· Domain isolation based on the CAN bus

OBD-II

Ethernet Switch
Ethernet

Ethernet

FlexRay

Central Gateway

LIN

CAN CAN CAN CAN

USB
Head Unit

K-CAN4

K-CAN4

Window

Trunk

Telematic Communication Box
K-CAN4

Body-CAN PT-CAN Chassis-CAN

Engine

Kombi

Door

Wiper

...

Local Exploit Chain

· Root the Head Unit via USB and OBD ports

1 USB / OBD-II

BMW Car

2
Backdoor

NBT Head Unit

CAN Network

4
UDS Messages

Central Gateway

Remote Exploit Chain

· Exploit the TCB through a fake base station

Software Defined Radio Platform

1

2

 USRP  OpenBTS  Signal Suppressor

NGTP Message in SMS

Simulated GSM Network

5

4

BMW Car 3
Inject malicious code

CAN Network

UDS Messages
Central Gateway

CAN Messages
Telematic Communication Box

Agenda

· Vehicle Components and Exploit Chains · Root the Head Unit · Exploit the Telematic Communication Box · Attack ECUs behind the Gateway · Incident Response and Countermeasures

NBT Head Unit Architecture

· Dual systems
· High layer: HU-Intel
 Multi-media system
· Low layer: HU-Jacinto
 CAN-bus communication

HU-Intel
(QNX / Intel / x86)
QNET
HU-Jacinto
(QNX / TI Dra44x / ARM926EJ)

· Shared Network via QNET NBT Head Unit
 QNET: the QNX native networking based on TCP/IP

USB

Telematic

Communication Box

(TCB)

K-CAN4

Central Gateway
K-CAN4

· Key services
· On-board diagnosis service · USB-based services (e.g. navigation update, firmware upgrade) · Online services (e.g. BMW ConnectedDrive Service)

Connecting to the Internal Network
· Wi-Fi is disabled by default · But, it supports some USB Ethernet adapters
· Using USB as an Ethernet network
· Acting as an Ethernet gateway
· IP: 192.168.0.1 · Net mask: 255.255.255.0

Connecting to the Internal Network
· No firewall rules applied on the USB ethernet interface
· Internal services are exposed
 TCP port 80 - http server (lighttpd)  TCP port 6801 - on-board diagnosis service  Etc.
· Unlock new attack points

Arbitrary Command Execution in the Diagnosis Service
· Diagnosis Service
· Host program
 /opt/sys/bin/NbtDiagHuHighApp
· System diagnosis and reconfiguration
 BMW diagnostic tool: "ToolSet32"
· Available over TCP/IP networking (TCP port 6801) · Implement a custom UDS (Unified Diagnostic Services) protocol

Arbitrary Command Execution in the Diagnosis Service
· Protocol packet
· Packet header (PDU Body Size + PDU Control Type) · Packet body (ECU Src Addr + ECU Dest Addr + UDS Payload)

Arbitrary Command Execution in the Diagnosis Service
· UDS diagnostic job
· Receive bash script and write into the HU-Intel system · /dev/shmem/tunneling
· Execute the bash script to reconfigure NBT Head Unit

Arbitrary Command Execution in the Diagnosis Service
· UDS diagnostic job
· The bash script is digitally signed

Arbitrary Command Execution in the Diagnosis Service
· Root cause of the vulnerability
· Multi-threaded implementation without thread-safe protection (e.g. thread locks) when accessing the bash script
· Leading to a TOCTOU (Time of Check, Time of Use) vulnerability

Arbitrary Command Execution in the Diagnosis Service
· Trigger the bug
· diag_thread
Send normal requests to write and execute the bash script
· race_thread
Send malicious requests to rewrite the bash script in filesystem when the "diag_thread" is verifying the original bash script in memory

Arbitrary Command Execution in the Diagnosis Service
· Deliver the exploit
· Ethernet over USB
 USB-Ethernet adapter
· Ethernet over OBD-II
 OBD E-Net cable (through the Gateway)

Arbitrary Code Execution during Navigation Update
· Navigation Map Update Service
· Monitor USB ports · Each map file is compressed · The compressed map files are managed by an update config file
 manage_upd.nzdf
· Decompress map files from USB stick into the HU-Intel filesystem

Arbitrary Code Execution during Navigation Update
· Buffer overflow
· No bounds check on retrieving a map
filename from "manage_upd.nzdf" when decompressing map files
· The map filename is copied into a stack buffer (1024 bytes) "fileName" using the "sprintf()"
· Leading to a stack buffer overflow

Arbitrary Code Execution during Navigation Update
· Exploitation
· Not digitally signed · Manipulate the map "filename"
in "manage_upd.nzdf" to trigger stack buffer overflow

Arbitrary Code Execution during Navigation Update
· Exploitation
· Not digitally signed · Manipulate the map "filename"
in "manage_upd.nzdf" to trigger stack buffer overflow · No stack canaries, No ASLR · Achieved code execution using ROP

Remote Code Execution in ConnectedDrive Service
· (In-Car) BMW ConnectedDrive service
· Provide Telematic and Online functions
 Real-time traffic information  Online News  Online Weather  ...
BMW Online (BMW i3 2017)

Remote Code Execution in ConnectedDrive Service
· (In-Car) BMW ConnectedDrive service
· Provide Telematic and Online functions
 Real-time traffic information  Online News  Online Weather  ...
· Provisioning profile (ProvOTABackUpNBT.xml)
 URL for the Online News

Remote Code Execution in ConnectedDrive Service
· Provisioning update
· Periodic poll requests through HTTP proxy · If backend server responds with the corresponding data,
a new profile will be deployed to reconfigure the service
· The new provisioning profile is validated using MD5

Remote Code Execution in ConnectedDrive Service
· Hijack the provisioning update
· ConnectedDrive Service and provisioning update only work under the 3G/2G network
· Need to setup a fake GSM base station to intercept GPRS traffic
 Universal Software Radio Peripheral (USRP)  Open Base Transceiver Station (OpenBTS)

Remote Code Execution in ConnectedDrive Service
· Hijack the provisioning update
· ConnectedDrive Service and provisioning update only work under the 3G/2G network
· Need to setup a fake GSM base station to intercept GPRS traffic
 Universal Software Radio Peripheral (USRP)  Open Base Transceiver Station (OpenBTS)
· Manipulate the URL of Online News

Remote Code Execution in ConnectedDrive Service
· Online News
· Processed by an in-car browser application in the HU-Intel system
 /opt/conn/bin/DevCtrlBrowser

Remote Code Execution in ConnectedDrive Service
· Online News
· Browser User-Agent Mozilla/5.0 (NBT_ASN;07-14;BON;1024x420;gps nav;;;tts;;psim;;;;;;;;;) AppleWebKit/535.17 (KHTML, like Gecko)
· The WebKit engine customized by Harman for QNX OS  libwebkit-hbas-NBT.so  Old version with known vulnerabilities

Remote Code Execution in ConnectedDrive Service
· The Use-After-Free bug in the WebKit "JSArray::sort()"
· The same bug used to exploit Tesla in-car browser in 2016 · The exploitation is similar, but some points are worth noting
 All the JS Objects (e.g. Uint32Array) are allocated in the QNX system heap using "malloc()", instead of the Webkit "fastMalloc()"
 No JIT and No "RWX" buffer
 Hijack the function pointer "strtol()" with "system()" in the GOT, then invoking the JS function: "new Date(`id > /fs/usb0/.x')" to achieve code execution

Remote Code Execution in ConnectedDrive Service
· Got a browser shell
· Got a browser shell
· Privilege escalation
· No browser sandbox · Leverage the TOCTOU race condition vulnerability in
the diagnosis service (TCP 6801)

CAN Message Injection from NBT to K-CAN Bus
· Get root access on the HU-Jacinto
· Login into HU-Jacinto system from HU-Intel through QNET without passwords

CAN Message Injection from NBT to K-CAN Bus
· CAN-bus driver
 /net/hu-jacinto/opt/sys/bin/stage1_2
· Dynamically Hook the function "CanTransmit_15E2F0" to send arbitrary CAN message
CanTransmit_15E2F0( int can_id, _BYTE can_data_len, _BYTE* can_data )

Agenda

· Vehicle Components and Exploit Chains · Root the Head Unit · Exploit the Telematic Communication Box · Attack ECUs behind the Gateway · Incident Response and Countermeasures

Architecture of the TCB

· Dual units
· High-layer
 Baseband processor for application tasks
· Low-layer
 MCU for CAN-bus communication

(REX RTOS)
Baseband Processor Qualcomm MDM6200
UART
(Autosar OS)
MCU Freescale 9S12X
Telematics Communication Box

USB

NBT

Head

Unit

K-CAN4

Gateway
K-CAN4

· 30+ application tasks
· NGTPD: (to handle Next Generation Telematics Protocol, a.k.a. NGTP) · SMSClient: (to process SMS) · Remote Service: (e.g. unlock door, control climate) · LastStateCall: (for remote diagnosis) · Provisioning Update: (e.g. Telematic, Remote services reconfiguration) · Etc.

NGTP
· Next Generation Telematics Protocol
· Transports services data between TCB and the BMW backend server
1. Wake up the car 2. Trigger the Remote Service 3. Trigger the Provisioning Update
· Previous security research
· Unsecure NGTP messages were transported using HTTP (found by ADAC in the year 2015)
· BMW has already fixed the vulnerability
 Replaced HTTP with HTTPS

Recover the NGTP
· ASN1 Encoding · Encrypted
 DES_CBC  AES_128_CBC
· Signed
 DES_CBC_MAC  HMAC_SHA1  HMAC_SHA256
· Hardcoded encryption keys

Trigger the Remote Service via SMS
· After reverse engineering "SMSClient" and "NGTP" tasks, we concluded NGTP messages are encapsulated in HTTPS or SMS
· The original workflows of remote service can be simplified as:
 The Remote Service is protected by HTTPS
China Unicom

Trigger the Remote Service via SMS
· In fact, we achieved the same effects using two SMS messages
Fake GSM base station
SMS is unsecure

Trigger the Remote Service via SMS
· Deliver the Remote Service payload
· Vehicle Identification Number (VIN) is necessary
 In China, the VIN is visible on the corner of windscreen
· A fake GSM base station
 USRP  OpenBTS
· Trigger Remote Service functions
· Unlock doors · Climate control

Remote Code Execution in the Provisioning Update
· The provisioning data contains APN, HTTP proxy configurations and various service URLs
· Send NGTP messages to the TCB via SMS (using the fake base station) to trigger provisioning update through the HTTP proxy

Remote Code Execution in the Provisioning Update
· The provisioning data is transferred in XML format and protected from being tampered using signature verification

· The signature of the XML is stored in hex format and unhexified during the signature verification

Unhexified Signature buffer
(300 bytes)

Unhexified Signature size

Remote Code Execution in the Provisioning Update
· Stack buffer overflow
· If we crafted the provisioning data and fill the "signature" with more than 300 bytes, a stack buffer overflow would happen
· No stack canary protection in the RTOS · Exploiting stack buffer overflow using ROP · Get code execution in the RTOS

UDS Message Injection from TCB to the K-CAN Bus
· Last State Call
· A task of gathering vehicle status data via UDS messages · The global PDM buffer saves different "pdm_configs" according to
vehicle type. Each "pdm_config" has several "pdm_job" and each "pdm_job" maps one UDS message
· The PDM buffer is stored in the firmware, we could overwrite the originals to the malicious UDS messages
· Trigger the task "Last State Call"

Agenda

· Vehicle Components and Exploit Chains · Root the Head Unit · Exploit the Telematic Communication Box · Attack ECUs behind the Gateway · Incident Response and Countermeasures

ECUs behind the Gateway

· CAN buses connected to various ECUs
· Domain isolation based on the CAN bus

OBD-II

Ethernet Switch
Ethernet

Ethernet

FlexRay

Central Gateway

LIN

CAN CAN CAN CAN

USB
Head Unit

K-CAN4

K-CAN4

Window

Trunk

Telematic Communication Box
K-CAN4

Body-CAN PT-CAN Chassis-CAN

Engine

Kombi

Door

Wiper

...

Attack the ECUs on the K-CAN bus

· Limited influence

OBD-II

switch

Ethernet

USB

Head Unit

TCB

Ethernet Gateway

K-CAN4

K-CAN4

ECUs

Body-CAN PT-CAN Chassis-CAN

Attack ECUs through the Gateway

· Need to transfer something through the Gateway
· Diagnostic function from OBD

· LastStateCall

Body-CAN

Gateway

K-CAN4

PT-CAN

Attack ECUs through the Gateway

· Diagnostic function
CAN ID

CAN DATA

0x06 BIT 8- 10

source BIT 0 -7

target BYTE 0

UDS message

Attack ECUs through the Gateway

· Diagnostic function
Normal diagnostic scene:

OBD E-Net

Gateway
(UDS router)

K-CAN4

0x6F5 61 xx xx xx xx xx xx xx

Attack scene:

Gateway
(UDS router)

K-CAN4

0x661 f5 xx xx xx xx xx xx xx

Attack ECUs through the Gateway

· Diagnostic function
· Try to send to other ECUs · Seems working!

Attack scene:

ECUs

x-CAN

Gateway
(UDS router)

K-CAN4

0x661 xx xx xx xx xx xx xx xx

Attack ECUs through the Gateway

· The LastStateCall
CAN ID

CAN DATA

0x06 BIT 8- 10

0xf3 ID of TCB

F0 LSC target

UDS message

0x31 0x01 0x0F 0x0B
Routine Control

Target ID
2 Bytes

UDS content to forward

Attack ECUs through the Gateway

· The LastStateCall
Attack scene:

ECUs

x-CAN

Gateway
LSC Routine Control

K-CAN4 LSC message

TCB

Attack ECUs By UDS messages

· Normal UDS diagnosis
· Light · Door · Air Conditioner ·...
· Normal UDS operation
· Reset ECUs ·...

Cyber security to Functional safety!

Attack ECUs By UDS messages
· Normal UDS diagnosis
· Light · Door · Air Conditioner ·...
BMW Diagnostic Tool (ISTA+)

Attack ECUs By UDS messages
· Other UDS diagnosis
· Reset ECUs  Reset works against ECUs that connected to the CAN bus when the vehicle is driving (Lack of speed check)
· Change the driver seat position  Move the seat forward/rearward  Fold the seat backrest forward/rearward

Conclusions
1. Root the Head Unit via the USB, OBD and fake GSM base station
2. Trigger BMW "Remote Service" via the SMS 3. Exploit the TCB through a fake GSM network 4. Send CAN/UDS messages from NBT/TCB to the K-CAN bus 5. Utilize the remote diagnostic messaging features to attack many
ECUs behind the Gateway

Agenda

· Vehicle Components and Exploit Chains · Root the Head Unit · Exploit the Telematic Communication Box · Attack ECUs behind the Gateway · Incident Response and Countermeasures

TIMELINE AND MILESTONES.

Publication of Research Paper 5/22/2018
Reservation of CVEs 4/5/2018
Full confirmation on 3/9/2018

Rollout of all backend and vehicle measures Summer 2018

Research project by Tencent Keen Security Lab 2017
BMW GROUP

02/2017 ­ 02/2018

Disclosure of report to BMW Group
2/26/2018

Completion of rollout of all backend and vehicle measures
08/2018

Analysis and validation of vulnerabilities on different vehicle types, control unit generations and varying regional infrastructure

Confirmation of measures and first rollout 05/2018
Development and validation of mitigation measures

VULNERABILITY ANALYSIS AND VALIDATION: JOINT FORCES WITHIN THE BMW GROUP.
Automotive Security & Incident Management

Connected Drive Experts

Local Development Centers and Service Providers.

BMW GROUP

Corporate Quality

Development Teams for Head Unit, Telematics Devices & Central Gateway

COMPLEXITY IN VALIDATION & TESTING.
Research findings based on evaluation of four vehicle configurations:

Detailed report

Validation and testing required for a multitude of vehicle configurations:

BMW GROUP

...

Example: HTTP Hijack of ConnectedDrive provisioning + exploitation of buffer overflow
Analysis: · One T-Box generation affected by buffer overflow · Additional misconfiguration (URL) inside the T-Box
SW limited to one regional hub (China)
Countermeasure: · Over-the-air reconfiguration of all affected vehicles
to change the configured URL from HTTP to HTTPS · 86 % success rate for initial attempt (38 days) · 96 % success rate w/ up to 4 retries (45 days)

DETAILED VIEW ON ONE COUNTERMEASURE: REMOTE SERVICE FLOW.

Client

Remote Service Server

Vehicle

Execute Remote Service DoorUnlock

Send Wake-up (Remote Service) via SMS (NGTP)

Provisioned config: DoorLock = True DoorUnlock = True

Request RemoteService command via HTTPS Remote Service command DoorUnlock (NGTP)

Check provisioning 

BMW GROUP

Send confirmation DoorUnlock

Send confirmation via HTTPS (NGTP)

Unlock doors



DETAILED VIEW ON ONE COUNTERMEASURE: REMOTE SERVICE FLOW.

Client

Remote Service Server

Vehicle

Provisioned config: DoorLock = True DoorUnlock = True

Rogue

Server Simulator

Base Station

Inject Remote Service Wake-up via SMS
Inject Remote Service command via SMS
Check provisioning 

Unlock doors



BMW GROUP

DETAILED VIEW ON ONE COUNTERMEASURE: REMOTE SERVICE FLOW.

Client

Remote Service Server

Re-provision all affected vehicles

Vehicle

Provisioned config: DoorLock = False DoorUnlock = False

Rogue

Server Simulator

Base Station

Inject Remote Service Wake-up via SMS
Inject Remote Service command via SMS
Check provisioning 

Unlock doors



BMW GROUP

DETAILED VIEW ON ONE COUNTERMEASURE: REMOTE SERVICE FLOW.

Client

Remote Service Server

Provisioning Server

Vehicle

Provisioned config: DoorLock = False DoorUnlock = False

Execute Remote Service DoorUnlock

Trigger Provisioning (DoorUnlock = True) Send Wake-up (Provisioning) via SMS (NGTP) Request Provisioning via HTTPS Provisioning XML

Provisioned config: DoorLock = False DoorUnlock = True

Normal Remote Service Flow

Check provisioning 

Unlock doors



BMW GROUP

... Trigger Provisioning (DoorUnlock = False)
Provisioning XML

Provisioned config: DoorLock = False DoorUnlock = False

FIXING VULNERABILITIES & RESPONSIBLE VULNERABILITY DISCLOSURE.

BMW Group Responsible Disclosure: report-vulnerabilities@bmwgroup.com PGP Key available on website.

Industry-wide activities in Automotive Security.

https://www.bmwgroup.com/en/general/Security.html
BMW GROUP

SUMMARY.
1 ­ Automotive electronics is a complex business: long product life-cycles and a high variety of configurations. 2 ­ OTA updates are essential and allow for a fast response time. 3 ­ Automotive industry is changing: security has to be an integral part of development and operations. 4 ­ Responsible disclosure is a key factor for improving product security.
BMW GROUP

